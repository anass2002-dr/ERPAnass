// <auto-generated />
using System;
using ERP_Anass_backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP_Anass_backend.Migrations
{
    [DbContext(typeof(DbContextERP))]
    [Migration("20240802155430_02_08_")]
    partial class _02_08_
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EFilleInEmail", b =>
                {
                    b.Property<int>("IdEmail")
                        .HasColumnType("int")
                        .HasColumnName("idEmail");

                    b.Property<int>("IdFille")
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    b.HasKey("IdEmail", "IdFille")
                        .HasName("PK__e_FilleI__46347D03E0F491FE");

                    b.HasIndex("IdFille");

                    b.ToTable("e_FilleInEmails", (string)null);
                });

            modelBuilder.Entity("ERP_Anass_backend.Models.Article", b =>
                {
                    b.Property<int>("idArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idArticle"));

                    b.Property<string>("ArticleName")
                        .HasColumnType("longtext");

                    b.Property<string>("ArticleRef")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionArticle")
                        .HasColumnType("longtext");

                    b.Property<int>("FamilyID")
                        .HasColumnType("int");

                    b.Property<float>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("idArticle");

                    b.HasIndex("FamilyID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("ERP_Anass_backend.Models.Familly", b =>
                {
                    b.Property<int>("idFamilly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idFamilly"));

                    b.Property<string>("familyDesc")
                        .HasColumnType("longtext");

                    b.Property<string>("familyName")
                        .HasColumnType("longtext");

                    b.Property<string>("familyRef")
                        .HasColumnType("longtext");

                    b.HasKey("idFamilly");

                    b.ToTable("Familly");
                });

            modelBuilder.Entity("PaieEFilleInContrat", b =>
                {
                    b.Property<int>("IdContrat")
                        .HasColumnType("int")
                        .HasColumnName("idContrat");

                    b.Property<int>("IdFille")
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    b.HasKey("IdContrat", "IdFille")
                        .HasName("PK__Paie_E_F__B36AEBFBC72E890A");

                    b.HasIndex("IdFille");

                    b.ToTable("Paie_E_FilleInContrat", (string)null);
                });

            modelBuilder.Entity("SUserDossier", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idUser");

                    b.Property<int>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.HasKey("IdUser", "IdDossier")
                        .HasName("PK__s_UserDo__732748166511DB00");

                    b.HasIndex("IdDossier");

                    b.ToTable("s_UserDossier", (string)null);
                });

            modelBuilder.Entity("SUserRole", b =>
                {
                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    b.Property<string>("IdUser")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idUser");

                    b.HasKey("IdRole", "IdUser")
                        .HasName("PK__s_UserRo__D67520CC0F857492");

                    b.HasIndex("IdUser");

                    b.ToTable("s_UserRoles", (string)null);
                });

            modelBuilder.Entity("testdb.Models.AArticle", b =>
                {
                    b.Property<int>("IdArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdArticle"));

                    b.Property<bool?>("AchatArticle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("achatArticle");

                    b.Property<bool?>("CheckBateau")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkBateau");

                    b.Property<bool?>("CheckDureDevie")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkDureDevie");

                    b.Property<bool?>("CheckMaintenance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkMaintenance");

                    b.Property<string>("ClassmentArticle")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("classmentArticle");

                    b.Property<string>("CodeBareArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("codeBareArticle");

                    b.Property<int?>("CodePdFini")
                        .HasColumnType("int")
                        .HasColumnName("codePdFini");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("DescArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descArticle");

                    b.Property<int?>("DureDevie")
                        .HasColumnType("int")
                        .HasColumnName("dureDevie");

                    b.Property<bool?>("FavorisArticle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("favorisArticle");

                    b.Property<int?>("IdFamille")
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdTaxeAchat")
                        .HasColumnType("int")
                        .HasColumnName("idTaxeAchat");

                    b.Property<int?>("IdTaxeVente")
                        .HasColumnType("int")
                        .HasColumnName("idTaxeVente");

                    b.Property<int?>("IdUnite")
                        .HasColumnType("int")
                        .HasColumnName("idUnite");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdWooProducts")
                        .HasColumnType("int")
                        .HasColumnName("idWooProducts");

                    b.Property<bool?>("LocationArticle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("locationArticle");

                    b.Property<string>("MesureArticle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mesureArticle");

                    b.Property<string>("MetaArticle")
                        .HasColumnType("longtext")
                        .HasColumnName("metaArticle");

                    b.Property<string>("MetaWooArticle")
                        .HasColumnType("longtext")
                        .HasColumnName("metaWooArticle");

                    b.Property<string>("NomArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomArticle");

                    b.Property<bool?>("PdFini")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PhotoArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("photoArticle");

                    b.Property<double?>("PourCentArticle")
                        .HasColumnType("double")
                        .HasColumnName("pourCentArticle");

                    b.Property<decimal?>("PrixAchatHt")
                        .HasColumnType("money")
                        .HasColumnName("prixAchat_HT");

                    b.Property<decimal?>("PrixAchatHt1")
                        .HasColumnType("money")
                        .HasColumnName("prixAchat_HT_1");

                    b.Property<decimal?>("PrixAchatTtc")
                        .HasColumnType("money")
                        .HasColumnName("prixAchat_TTC");

                    b.Property<decimal?>("PrixAchatTtc1")
                        .HasColumnType("money")
                        .HasColumnName("prixAchat_TTC_1");

                    b.Property<decimal?>("PrixVenteHt")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_HT");

                    b.Property<decimal?>("PrixVenteHt1")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_HT_1");

                    b.Property<decimal?>("PrixVenteHt2")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_HT_2");

                    b.Property<decimal?>("PrixVenteTtc")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_TTC");

                    b.Property<decimal?>("PrixVenteTtc1")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_TTC_1");

                    b.Property<decimal?>("PrixVenteTtc2")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_TTC_2");

                    b.Property<decimal?>("PrixlocationHt")
                        .HasColumnType("money")
                        .HasColumnName("prixlocation_HT");

                    b.Property<decimal?>("PrixlocationTtc")
                        .HasColumnType("money")
                        .HasColumnName("prixlocation_TTC");

                    b.Property<double?>("QteBox")
                        .HasColumnType("double")
                        .HasColumnName("qteBox");

                    b.Property<string>("RefArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("refArticle");

                    b.Property<string>("StateDureDevie")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("stateDureDevie");

                    b.Property<double?>("StkMinArticle")
                        .HasColumnType("double")
                        .HasColumnName("stkMinArticle");

                    b.Property<string>("TypeArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("typeArticle");

                    b.Property<bool?>("VenteArticle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("venteArticle");

                    b.Property<bool?>("WooArticle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("wooArticle");

                    b.HasKey("IdArticle")
                        .HasName("PK__a_Articl__6719B9B36422FA22");

                    b.HasIndex("IdFamille");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdTaxeAchat");

                    b.HasIndex("IdTaxeVente");

                    b.HasIndex("IdUnite");

                    b.HasIndex("IdUser");

                    b.ToTable("a_Article", (string)null);
                });

            modelBuilder.Entity("testdb.Models.AArticleInFille", b =>
                {
                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdFille")
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdFille");

                    b.ToTable("a_ArticleInFille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.ABateau", b =>
                {
                    b.Property<int>("IdBateau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBateau");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBateau"));

                    b.Property<bool?>("CheckCollaboration")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkCollaboration");

                    b.Property<bool?>("Clotur")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clotur");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime")
                        .HasColumnName("dateDebut");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime")
                        .HasColumnName("dateFin");

                    b.Property<double?>("DimensionX")
                        .HasColumnType("double")
                        .HasColumnName("dimensionX");

                    b.Property<double?>("DimensionY")
                        .HasColumnType("double")
                        .HasColumnName("dimensionY");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<decimal?>("PrixM")
                        .HasColumnType("money")
                        .HasColumnName("prixM");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdBateau")
                        .HasName("PK__a_Bateau__8303C1652CEDC140");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdClient");

                    b.ToTable("a_Bateau", (string)null);
                });

            modelBuilder.Entity("testdb.Models.AFamille", b =>
                {
                    b.Property<int>("IdFamille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFamille"));

                    b.Property<string>("CdeFao")
                        .HasColumnType("longtext")
                        .HasColumnName("CDE_FAO");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("DesFamille")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("desFamille");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<long?>("IdNomScientifique")
                        .HasColumnType("bigint")
                        .HasColumnName("idNomScientifique");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<long?>("IdTypeFamaille")
                        .HasColumnType("bigint")
                        .HasColumnName("idTypeFamaille");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdWooCategories")
                        .HasColumnType("int")
                        .HasColumnName("idWooCategories");

                    b.Property<string>("NomFamille")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nomFamille");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentId");

                    b.Property<string>("PhotoFamille")
                        .HasColumnType("longtext")
                        .HasColumnName("photoFamille");

                    b.Property<bool?>("WooFamille")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("wooFamille");

                    b.HasKey("IdFamille")
                        .HasName("PK__a_Famill__CC8A49782C7E39D3");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdNomScientifique");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdTypeFamaille");

                    b.HasIndex("IdUser");

                    b.ToTable("a_Famille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BDepot", b =>
                {
                    b.Property<int>("IdDepot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDepot"));

                    b.Property<string>("AdressDepot")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("adressDepot");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("idVille");

                    b.Property<string>("NomDepot")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomDepot");

                    b.Property<bool?>("PrcpDepot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("prcpDepot");

                    b.HasKey("IdDepot")
                        .HasName("PK__b_Depot__F1B853A3BEB7A511");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVille");

                    b.ToTable("b_Depot", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BDepotSup", b =>
                {
                    b.Property<int>("IdSupDepot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSupDepot");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSupDepot"));

                    b.Property<string>("CodeBare")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codeBare");

                    b.Property<string>("CouloirX")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("couloirX");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("Hauteur")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hauteur");

                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("InfoSupDepot")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("infoSupDepot");

                    b.Property<string>("NomSupDepot")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomSupDepot");

                    b.Property<bool?>("PrcpSupDepot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("prcpSupDepot");

                    b.Property<string>("RayonY")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rayonY");

                    b.Property<string>("TypeSupDepot")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeSupDepot");

                    b.HasKey("IdSupDepot")
                        .HasName("PK__b_DepotS__411440C9D14DCF4D");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("b_DepotSup", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BModRglm", b =>
                {
                    b.Property<int>("IdModRglm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdModRglm"));

                    b.Property<string>("CategModRglm")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categModRglm");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomModRglm")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomModRglm");

                    b.Property<decimal?>("Timbre")
                        .HasColumnType("money")
                        .HasColumnName("timbre");

                    b.HasKey("IdModRglm")
                        .HasName("PK__b_ModRgl__07F252FE436F7847");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("b_ModRglm", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BPay", b =>
                {
                    b.Property<int>("IdPays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPays"));

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("NomPays")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nomPays");

                    b.HasKey("IdPays")
                        .HasName("PK__b_Pays__BD257B67F1018B34");

                    b.HasIndex("IdGroup");

                    b.ToTable("b_Pays", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BPropriete", b =>
                {
                    b.Property<int>("IdPropriete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPropriete");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPropriete"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomPropriete")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomPropriete");

                    b.HasKey("IdPropriete")
                        .HasName("PK__b_Propri__B315A60B58F0AEBB");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("b_Propriete", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BService", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idService");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdService"));

                    b.Property<string>("DescService")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descService");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomService")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomService");

                    b.HasKey("IdService")
                        .HasName("PK__b_Servic__0E3EA45B6E72B811");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("b_Service", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BSoldTresorerie", b =>
                {
                    b.Property<int>("IdTreso")
                        .HasColumnType("int")
                        .HasColumnName("idTreso");

                    b.Property<int>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<decimal?>("SoldTresorerie")
                        .HasColumnType("money")
                        .HasColumnName("soldTresorerie");

                    b.HasKey("IdTreso", "IdDossier")
                        .HasName("PK__b_SoldTr__47A377971E1310B8");

                    b.HasIndex("IdDossier");

                    b.ToTable("b_SoldTresorerie", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BTaxe", b =>
                {
                    b.Property<int>("IdTaxe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTaxe");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTaxe"));

                    b.Property<int?>("CauxTaxe")
                        .HasColumnType("int")
                        .HasColumnName("cauxTaxe");

                    b.Property<DateTime?>("Createdate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("NomTaxe")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomTaxe");

                    b.Property<string>("TypeTaxe")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeTaxe");

                    b.HasKey("IdTaxe")
                        .HasName("PK__b_Taxe__C3E11D6649505FF4");

                    b.HasIndex("IdGroup");

                    b.ToTable("b_Taxe", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BTresorerie", b =>
                {
                    b.Property<int>("IdTreso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTreso");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTreso"));

                    b.Property<string>("AdresseTreso")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("adresseTreso");

                    b.Property<decimal?>("CherfTreso")
                        .HasColumnType("money")
                        .HasColumnName("cherfTreso");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<bool?>("DefaultTreso")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("defaultTreso");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NameTreso")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nameTreso");

                    b.Property<string>("RibTreso")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ribTreso");

                    b.Property<decimal?>("SoldAutoriseTreso")
                        .HasColumnType("money")
                        .HasColumnName("soldAutoriseTreso");

                    b.HasKey("IdTreso")
                        .HasName("PK__b_Tresor__0393F6035C83AC24");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("b_Tresorerie", (string)null);
                });

            modelBuilder.Entity("testdb.Models.BVille", b =>
                {
                    b.Property<int>("IdVille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVille");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdVille"));

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<string>("NomVille")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nomVille");

                    b.HasKey("IdVille")
                        .HasName("PK__b_Ville__A33D0147277D3BB4");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdPays");

                    b.ToTable("b_Ville", (string)null);
                });

            modelBuilder.Entity("testdb.Models.DDepartement", b =>
                {
                    b.Property<int>("IdDepartement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDepartement");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDepartement"));

                    b.Property<string>("DescDepartement")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("descDepartement");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomDepartement")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomDepartement");

                    b.HasKey("IdDepartement")
                        .HasName("PK__d_Depart__9E93B3EBF32C9097");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("d_Departement", (string)null);
                });

            modelBuilder.Entity("testdb.Models.EArtDepot", b =>
                {
                    b.Property<decimal?>("Cmup")
                        .HasColumnType("money")
                        .HasColumnName("cmup");

                    b.Property<decimal?>("FirstPrix")
                        .HasColumnType("money")
                        .HasColumnName("firstPrix");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdSupDepot")
                        .HasColumnType("int")
                        .HasColumnName("idSupDepot");

                    b.Property<decimal?>("LastPrix")
                        .HasColumnType("money")
                        .HasColumnName("lastPrix");

                    b.Property<double?>("QteDepot")
                        .HasColumnType("double")
                        .HasColumnName("qteDepot");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdSupDepot");

                    b.ToTable("e_Art_Depot", (string)null);
                });

            modelBuilder.Entity("testdb.Models.EEmail", b =>
                {
                    b.Property<int>("IdEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEmail");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEmail"));

                    b.Property<string>("Attachements")
                        .HasColumnType("longtext")
                        .HasColumnName("attachements");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateEmail")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEmail");

                    b.Property<string>("Folder")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("folder");

                    b.Property<string>("FromName")
                        .HasColumnType("longtext")
                        .HasColumnName("fromName");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<bool?>("Seen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("seen");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .HasColumnType("longtext")
                        .HasColumnName("to");

                    b.Property<string>("Uid")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("uid");

                    b.HasKey("IdEmail")
                        .HasName("PK__e_Emails__DF5377108F312834");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("e_Emails", (string)null);
                });

            modelBuilder.Entity("testdb.Models.EEntet", b =>
                {
                    b.Property<int>("IdEntet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEntet"));

                    b.Property<decimal?>("Avance")
                        .HasColumnType("money")
                        .HasColumnName("avance");

                    b.Property<string>("CertificatEuro")
                        .HasColumnType("longtext")
                        .HasColumnName("certificatEuro");

                    b.Property<double?>("ChangeDh")
                        .HasColumnType("double")
                        .HasColumnName("changeDH");

                    b.Property<bool?>("CheckCopierVers")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkCopierVers");

                    b.Property<bool?>("CheckExpiration")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkExpiration");

                    b.Property<bool?>("Clotur")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clotur");

                    b.Property<string>("CodeType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codeType");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateEcheanche")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEcheanche");

                    b.Property<DateTime?>("DateEntet")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEntet");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime")
                        .HasColumnName("dateValidation");

                    b.Property<string>("DetlpPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("DETLP_plt");

                    b.Property<string>("EtatDoc")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("etatDoc");

                    b.Property<string>("ExpeditoLpPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("expeditoLP_plt");

                    b.Property<string>("ExpeditoPPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("expeditoP_plt");

                    b.Property<string>("FactureLpPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("factureLP_plt");

                    b.Property<string>("FacturePPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("factureP_plt");

                    b.Property<DateOnly?>("FechaLpPlt")
                        .HasColumnType("date")
                        .HasColumnName("fechaLP_plt");

                    b.Property<DateOnly?>("FechaPPlt")
                        .HasColumnType("date")
                        .HasColumnName("fechaP_plt");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdDepot2")
                        .HasColumnType("int")
                        .HasColumnName("idDepot_2");

                    b.Property<int?>("IdDestinataire")
                        .HasColumnType("int")
                        .HasColumnName("idDestinataire");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdEntetS")
                        .HasColumnType("int")
                        .HasColumnName("idEntetS");

                    b.Property<int?>("IdFamille")
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    b.Property<int?>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("idFournisseur");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdVendeur")
                        .HasColumnType("int")
                        .HasColumnName("idVendeur");

                    b.Property<string>("Info")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("info");

                    b.Property<bool?>("InternationalCheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lote")
                        .HasColumnType("longtext")
                        .HasColumnName("lote");

                    b.Property<string>("LotePf")
                        .HasColumnType("longtext")
                        .HasColumnName("LotePF");

                    b.Property<double?>("MateriaPrima")
                        .HasColumnType("double");

                    b.Property<string>("Meta")
                        .HasColumnType("longtext")
                        .HasColumnName("meta");

                    b.Property<string>("MetaImpression")
                        .HasColumnType("longtext")
                        .HasColumnName("metaImpression");

                    b.Property<string>("MtPremier")
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nom");

                    b.Property<string>("NomDestinataire")
                        .HasColumnType("longtext")
                        .HasColumnName("nomDestinataire");

                    b.Property<string>("NumCheq")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numCheq");

                    b.Property<int?>("NumFactur")
                        .HasColumnType("int")
                        .HasColumnName("numFactur");

                    b.Property<int?>("NumeroTaux")
                        .HasColumnType("int");

                    b.Property<string>("Obs")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("obs");

                    b.Property<double?>("PesoBruto")
                        .HasColumnType("double");

                    b.Property<double?>("PesoNeto")
                        .HasColumnType("double");

                    b.Property<double?>("PesoNetoEscurido")
                        .HasColumnType("double");

                    b.Property<string>("ProprieteClient")
                        .HasColumnType("longtext")
                        .HasColumnName("proprieteClient");

                    b.Property<double?>("QuantiteLpPlt")
                        .HasColumnType("double")
                        .HasColumnName("quantiteLP_plt");

                    b.Property<double?>("QuantitePPlt")
                        .HasColumnType("double")
                        .HasColumnName("quantiteP_plt");

                    b.Property<string>("RefFactur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("refFactur");

                    b.Property<decimal?>("RemiseGlobal")
                        .HasColumnType("money")
                        .HasColumnName("remiseGlobal");

                    b.Property<double?>("SumNetWeight")
                        .HasColumnType("double");

                    b.Property<double?>("SumUnitePrice")
                        .HasColumnType("double");

                    b.Property<double?>("TauxGalce")
                        .HasColumnType("double");

                    b.Property<double?>("TauxPlastique")
                        .HasColumnType("double")
                        .HasColumnName("tauxPlastique");

                    b.Property<string>("Terms")
                        .HasColumnType("longtext")
                        .HasColumnName("terms");

                    b.Property<bool?>("TeypGlobal")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("teypGlobal");

                    b.Property<bool?>("Timbre")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("timbre");

                    b.Property<string>("Truck")
                        .HasColumnType("longtext")
                        .HasColumnName("truck");

                    b.Property<decimal?>("TtHt")
                        .HasColumnType("money")
                        .HasColumnName("TT_ht");

                    b.Property<decimal?>("TtMargeCmup")
                        .HasColumnType("money")
                        .HasColumnName("TT_MargeCmup");

                    b.Property<decimal?>("TtMargePxAcha")
                        .HasColumnType("money")
                        .HasColumnName("TT_MargePxAcha");

                    b.Property<decimal?>("TtNet")
                        .HasColumnType("money")
                        .HasColumnName("TT_net");

                    b.Property<decimal?>("TtRemis")
                        .HasColumnType("money")
                        .HasColumnName("TT_remis");

                    b.Property<decimal?>("TtTauxMargeCmup")
                        .HasColumnType("money")
                        .HasColumnName("TT_TauxMargeCmup");

                    b.Property<decimal?>("TtTauxMargePxAcha")
                        .HasColumnType("money")
                        .HasColumnName("TT_TauxMargePxAcha");

                    b.Property<decimal?>("TtTtc")
                        .HasColumnType("money")
                        .HasColumnName("TT_ttc");

                    b.Property<decimal?>("TtTva")
                        .HasColumnType("money")
                        .HasColumnName("TT_tva");

                    b.Property<bool?>("Ttc")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ttc");

                    b.Property<bool?>("Tva")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tva");

                    b.Property<string>("TypeLigne")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("typeLigne");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdEntet")
                        .HasName("PK__e_Entet__53DEA1117F1E3259");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdDepot2");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdFamille");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdModRglm");

                    b.HasIndex("IdUser");

                    b.ToTable("e_Entet", (string)null);
                });

            modelBuilder.Entity("testdb.Models.EEntetLign", b =>
                {
                    b.Property<int>("IdLign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLign");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLign"));

                    b.Property<string>("CodePdFini")
                        .HasColumnType("longtext")
                        .HasColumnName("codePdFini");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateOnly?>("DateCongelationLigne")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("datetime")
                        .HasColumnName("dateExpiration");

                    b.Property<string>("DateLigne")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dateLigne");

                    b.Property<string>("DescLign")
                        .HasColumnType("longtext")
                        .HasColumnName("descLign");

                    b.Property<double?>("DrainedNetWeight")
                        .HasColumnType("double")
                        .HasColumnName("drainedNetWeight");

                    b.Property<string>("DuaLigne")
                        .HasColumnType("longtext");

                    b.Property<string>("FrozenDate")
                        .HasColumnType("longtext")
                        .HasColumnName("frozenDate");

                    b.Property<double?>("GrossWeight")
                        .HasColumnType("double");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdEntet")
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    b.Property<int?>("IdSupDepot")
                        .HasColumnType("int")
                        .HasColumnName("idSupDepot");

                    b.Property<int?>("IdSupDepot2")
                        .HasColumnType("int")
                        .HasColumnName("idSupDepot_2");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<double?>("LastQte")
                        .HasColumnType("double")
                        .HasColumnName("lastQte");

                    b.Property<decimal?>("LgnCmup")
                        .HasColumnType("money")
                        .HasColumnName("lgnCmup");

                    b.Property<decimal?>("LgnHt")
                        .HasColumnType("money")
                        .HasColumnName("lgnHT");

                    b.Property<decimal?>("LgnMargeCmup")
                        .HasColumnType("money")
                        .HasColumnName("lgnMargeCmup");

                    b.Property<decimal?>("LgnMargePxAcha")
                        .HasColumnType("money")
                        .HasColumnName("lgnMargePxAcha");

                    b.Property<decimal?>("LgnPxAcha")
                        .HasColumnType("money")
                        .HasColumnName("lgnPxAcha");

                    b.Property<decimal?>("LgnRemise")
                        .HasColumnType("money")
                        .HasColumnName("lgnRemise");

                    b.Property<decimal?>("LgnTauxMargeCmup")
                        .HasColumnType("money")
                        .HasColumnName("lgnTauxMargeCmup");

                    b.Property<decimal?>("LgnTauxMargePxAcha")
                        .HasColumnType("money")
                        .HasColumnName("lgnTauxMargePxAcha");

                    b.Property<decimal?>("LgnTtc")
                        .HasColumnType("money")
                        .HasColumnName("lgnTTC");

                    b.Property<decimal?>("LgnTva")
                        .HasColumnType("money")
                        .HasColumnName("lgnTVA");

                    b.Property<string>("LgnUnite")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lgnUnite");

                    b.Property<string>("LgnUrgence")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lgnUrgence");

                    b.Property<decimal?>("LgnValeurCmup")
                        .HasColumnType("money")
                        .HasColumnName("lgnValeurCmup");

                    b.Property<decimal?>("LgnValeurPxAcha")
                        .HasColumnType("money")
                        .HasColumnName("lgnValeurPxAcha");

                    b.Property<string>("Lote")
                        .HasColumnType("longtext")
                        .HasColumnName("lote");

                    b.Property<string>("LotePfLigne")
                        .HasColumnType("longtext");

                    b.Property<string>("Meta")
                        .HasColumnType("longtext")
                        .HasColumnName("meta");

                    b.Property<double?>("NetWeight")
                        .HasColumnType("double");

                    b.Property<double?>("PackageEmvase")
                        .HasColumnType("double");

                    b.Property<double?>("PesoNetoLigne")
                        .HasColumnType("double");

                    b.Property<decimal?>("PrixHt")
                        .HasColumnType("money")
                        .HasColumnName("prixHT");

                    b.Property<decimal?>("PrixTtc")
                        .HasColumnType("money")
                        .HasColumnName("prixTTC");

                    b.Property<double?>("QteLign")
                        .HasColumnType("double")
                        .HasColumnName("qteLign");

                    b.Property<double?>("QtebyDua")
                        .HasColumnType("double")
                        .HasColumnName("qtebyDua");

                    b.Property<string>("RefArticle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("refArticle");

                    b.Property<double?>("SinAgua")
                        .HasColumnType("double");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sortOrder");

                    b.Property<int?>("ValCmup")
                        .HasColumnType("int")
                        .HasColumnName("valCmup");

                    b.Property<int?>("ValStock")
                        .HasColumnType("int")
                        .HasColumnName("valStock");

                    b.HasKey("IdLign")
                        .HasName("PK__e_EntetL__143910CCFFFD03D9");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdEntet");

                    b.HasIndex("IdSupDepot");

                    b.HasIndex("IdSupDepot2");

                    b.HasIndex("IdUser");

                    b.ToTable("e_EntetLign", (string)null);
                });

            modelBuilder.Entity("testdb.Models.EFilleInEntet", b =>
                {
                    b.Property<int?>("IdEntet")
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    b.Property<int?>("IdFille")
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    b.HasIndex("IdEntet");

                    b.HasIndex("IdFille");

                    b.ToTable("e_FilleInEntet", (string)null);
                });

            modelBuilder.Entity("testdb.Models.ETypeDoc", b =>
                {
                    b.Property<string>("CodeType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codeType");

                    b.Property<int>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<bool?>("CalculMarge")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("calculMarge");

                    b.Property<int?>("CodeClFr")
                        .HasColumnType("int")
                        .HasColumnName("codeCl_FR");

                    b.Property<string>("DescType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descType");

                    b.Property<string>("NomFacture")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nomFacture");

                    b.Property<int?>("NumFacture")
                        .HasColumnType("int")
                        .HasColumnName("numFacture");

                    b.Property<int?>("ValCaisse")
                        .HasColumnType("int")
                        .HasColumnName("valCaisse");

                    b.Property<int?>("ValCmup")
                        .HasColumnType("int")
                        .HasColumnName("valCmup");

                    b.Property<int?>("ValFifo")
                        .HasColumnType("int")
                        .HasColumnName("valFifo");

                    b.Property<int?>("ValLifo")
                        .HasColumnType("int")
                        .HasColumnName("valLifo");

                    b.Property<int?>("ValStock")
                        .HasColumnType("int")
                        .HasColumnName("valStock");

                    b.HasKey("CodeType", "IdDossier")
                        .HasName("PK__e_TypeDo__DEFF6F468DB4A912");

                    b.HasIndex("IdDossier");

                    b.ToTable("e_TypeDoc", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FFabrication", b =>
                {
                    b.Property<int>("IdFabrication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFabrication");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFabrication"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Info")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("info");

                    b.Property<string>("Reference")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("reference");

                    b.HasKey("IdFabrication")
                        .HasName("PK__f_Fabric__C10A431E8106A8EB");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("f_Fabrication", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FFabricationLign", b =>
                {
                    b.Property<int>("IdLignFab")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLignFab");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLignFab"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdFabrication")
                        .HasColumnType("int")
                        .HasColumnName("idFabrication");

                    b.Property<int?>("IdLignArticle")
                        .HasColumnType("int")
                        .HasColumnName("idLignArticle");

                    b.Property<double?>("QteFabrication")
                        .HasColumnType("double")
                        .HasColumnName("qteFabrication");

                    b.Property<double?>("QteLignFabrication")
                        .HasColumnType("double")
                        .HasColumnName("qteLignFabrication");

                    b.HasKey("IdLignFab")
                        .HasName("PK__f_Fabric__F8C72471FCD7CE4D");

                    b.HasIndex("IdFabrication");

                    b.HasIndex("IdLignArticle");

                    b.ToTable("f_FabricationLign", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FOrdre", b =>
                {
                    b.Property<int>("IdOrdre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idOrdre");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdOrdre"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateEndPlanification")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEndPlanification");

                    b.Property<DateTime?>("DatePlanification")
                        .HasColumnType("datetime")
                        .HasColumnName("datePlanification");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdFabrication")
                        .HasColumnType("int")
                        .HasColumnName("idFabrication");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdSupDepot")
                        .HasColumnType("int")
                        .HasColumnName("idSupDepot");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("NumOrdre")
                        .HasColumnType("int")
                        .HasColumnName("numOrdre");

                    b.Property<int?>("NumberPerson")
                        .HasColumnType("int")
                        .HasColumnName("numberPerson");

                    b.Property<int?>("PositionOrdre")
                        .HasColumnType("int")
                        .HasColumnName("positionOrdre");

                    b.Property<string>("ProgressType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("progressType");

                    b.Property<double?>("QteOrdre")
                        .HasColumnType("double")
                        .HasColumnName("qteOrdre");

                    b.Property<decimal?>("TtHt")
                        .HasColumnType("money")
                        .HasColumnName("ttHT");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdOrdre")
                        .HasName("PK__f_Ordre__C8AD1C42449B5826");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdFabrication");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdSupDepot");

                    b.HasIndex("IdUser");

                    b.ToTable("f_Ordre", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FOrdreLine", b =>
                {
                    b.Property<int>("IdOrdreLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idOrdreLine");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdOrdreLine"));

                    b.Property<decimal?>("Cmup")
                        .HasColumnType("money")
                        .HasColumnName("cmup");

                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdLignArticle")
                        .HasColumnType("int")
                        .HasColumnName("idLignArticle");

                    b.Property<int?>("IdOrdre")
                        .HasColumnType("int")
                        .HasColumnName("idOrdre");

                    b.Property<int?>("IdSupDepot")
                        .HasColumnType("int")
                        .HasColumnName("idSupDepot");

                    b.Property<double?>("QteOrdreLine")
                        .HasColumnType("double")
                        .HasColumnName("qteOrdreLine");

                    b.Property<decimal?>("TtHt")
                        .HasColumnType("money")
                        .HasColumnName("ttHT");

                    b.Property<string>("TypeOrdre")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("typeOrdre");

                    b.Property<int?>("ValStock")
                        .HasColumnType("int")
                        .HasColumnName("valStock");

                    b.HasKey("IdOrdreLine")
                        .HasName("PK__f_OrdreL__A8F09F55E111731B");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdLignArticle");

                    b.HasIndex("IdOrdre");

                    b.HasIndex("IdSupDepot");

                    b.ToTable("f_OrdreLine", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishCharge", b =>
                {
                    b.Property<int>("IdCharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCharge");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCharge"));

                    b.Property<double?>("Cout")
                        .HasColumnType("double")
                        .HasColumnName("cout");

                    b.Property<int?>("IdEntet")
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdService")
                        .HasColumnType("int")
                        .HasColumnName("idService");

                    b.HasKey("IdCharge")
                        .HasName("PK__fish_cha__5B96E1AC749E3A9D");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdService");

                    b.ToTable("fish_charge", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishEntet", b =>
                {
                    b.Property<int>("IdEntet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEntet"));

                    b.Property<string>("Barco")
                        .HasColumnType("longtext")
                        .HasColumnName("barco");

                    b.Property<bool?>("Clotur")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clotur");

                    b.Property<string>("CodeType")
                        .HasColumnType("longtext")
                        .HasColumnName("codeType");

                    b.Property<double?>("Comission")
                        .HasColumnType("double")
                        .HasColumnName("comission");

                    b.Property<DateOnly?>("DateCongele")
                        .HasColumnType("date")
                        .HasColumnName("dateCongele");

                    b.Property<DateOnly?>("DateEntet")
                        .HasColumnType("date")
                        .HasColumnName("dateEntet");

                    b.Property<DateOnly?>("DateLPlt")
                        .HasColumnType("date")
                        .HasColumnName("dateL_plt");

                    b.Property<DateOnly?>("DatePlt")
                        .HasColumnType("date")
                        .HasColumnName("date_plt");

                    b.Property<string>("Dua")
                        .HasColumnType("longtext")
                        .HasColumnName("DUA");

                    b.Property<string>("DuaLPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("duaL_plt");

                    b.Property<string>("DuaPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("dua_plt");

                    b.Property<string>("Etat")
                        .HasColumnType("longtext")
                        .HasColumnName("ETAT");

                    b.Property<string>("EtatDoc")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("etatDoc");

                    b.Property<string>("FacturNumLPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("facturNumL_plt");

                    b.Property<string>("FacturNumPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("facturNum_plt");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdEntetS")
                        .HasColumnType("int")
                        .HasColumnName("idEntetS");

                    b.Property<int?>("IdFamille")
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    b.Property<int?>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("idFournisseur");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<int?>("IdPort")
                        .HasColumnType("int")
                        .HasColumnName("idPort");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<double?>("KgRec")
                        .HasColumnType("double")
                        .HasColumnName("kgRec");

                    b.Property<string>("Lote")
                        .HasColumnType("longtext");

                    b.Property<string>("LoteLPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("LoteL_plt");

                    b.Property<string>("NumBonLPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("numBonL_plt");

                    b.Property<string>("NumBonPlt")
                        .HasColumnType("longtext")
                        .HasColumnName("numBon_plt");

                    b.Property<int?>("NumFactur")
                        .HasColumnType("int")
                        .HasColumnName("numFactur");

                    b.Property<double?>("Pm")
                        .HasColumnType("double")
                        .HasColumnName("PM");

                    b.Property<double?>("QuantiteLPlt")
                        .HasColumnType("double")
                        .HasColumnName("quantiteL_plt");

                    b.Property<double?>("QuantitePlt")
                        .HasColumnType("double")
                        .HasColumnName("quantite_plt");

                    b.Property<string>("RefFacture")
                        .HasColumnType("longtext")
                        .HasColumnName("refFacture");

                    b.Property<double?>("StockEntree")
                        .HasColumnType("double")
                        .HasColumnName("stockEntree");

                    b.Property<double?>("StockTaxable")
                        .HasColumnType("double")
                        .HasColumnName("stockTaxable");

                    b.Property<double?>("TotalAchat")
                        .HasColumnType("double")
                        .HasColumnName("totalAchat");

                    b.Property<double?>("TotalCais")
                        .HasColumnType("double");

                    b.Property<double?>("TotalCharges")
                        .HasColumnType("double")
                        .HasColumnName("totalCharges");

                    b.Property<double?>("TotalPn")
                        .HasColumnType("double")
                        .HasColumnName("TotalPN");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdEntet")
                        .HasName("PK__fish_ent__53DEA1113C7FFD0D");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdFamille");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdPort");

                    b.HasIndex("IdUser");

                    b.ToTable("fish_entet", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishEntetLign", b =>
                {
                    b.Property<int>("IdLign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLign");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLign"));

                    b.Property<double?>("Cais")
                        .HasColumnType("double")
                        .HasColumnName("cais");

                    b.Property<double?>("CaisInvt")
                        .HasColumnType("double")
                        .HasColumnName("caisINVT");

                    b.Property<string>("Calibre")
                        .HasColumnType("longtext")
                        .HasColumnName("calibre");

                    b.Property<string>("CodePlt")
                        .HasColumnType("longtext")
                        .HasColumnName("CodePLT");

                    b.Property<string>("DescLign")
                        .HasColumnType("longtext")
                        .HasColumnName("descLign");

                    b.Property<int?>("IdEntet")
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    b.Property<int?>("IdFamille")
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    b.Property<double?>("Pn")
                        .HasColumnType("double")
                        .HasColumnName("PN");

                    b.Property<double?>("Pninvt")
                        .HasColumnType("double")
                        .HasColumnName("PNINVT");

                    b.Property<double?>("Prix")
                        .HasColumnType("double")
                        .HasColumnName("prix");

                    b.Property<double?>("PrixTotal")
                        .HasColumnType("double")
                        .HasColumnName("prixTotal");

                    b.Property<double?>("Quantite")
                        .HasColumnType("double")
                        .HasColumnName("quantite");

                    b.HasKey("IdLign")
                        .HasName("PK__fish_ent__143910CC6021B68B");

                    b.HasIndex("IdEntet");

                    b.HasIndex("IdFamille");

                    b.ToTable("fish_entetLign", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishFamille", b =>
                {
                    b.Property<int>("IdFamille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFamille"));

                    b.Property<string>("CdeFao")
                        .HasColumnType("longtext")
                        .HasColumnName("CDE_FAO");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<long?>("IdNomScientifique")
                        .HasColumnType("bigint")
                        .HasColumnName("idNomScientifique");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<long?>("IdTypeFamaille")
                        .HasColumnType("bigint")
                        .HasColumnName("idTypeFamaille");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Marchandises")
                        .HasColumnType("longtext")
                        .HasColumnName("marchandises");

                    b.HasKey("IdFamille")
                        .HasName("PK__fish_famille");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdNomScientifique");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdTypeFamaille");

                    b.HasIndex("IdUser");

                    b.ToTable("fish_famille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishNomScientifique", b =>
                {
                    b.Property<long>("IdNomScientifique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idNomScientifique");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("IdNomScientifique"));

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("NomScientifique")
                        .HasColumnType("longtext");

                    b.HasKey("IdNomScientifique")
                        .HasName("PK__fish_Nom__8FBA4602A68646FB");

                    b.HasIndex("IdGroup");

                    b.ToTable("fish_NomScientifique", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishPort", b =>
                {
                    b.Property<int>("IdPort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPort");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPort"));

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomPort")
                        .HasColumnType("longtext")
                        .HasColumnName("nomPort");

                    b.HasKey("IdPort")
                        .HasName("PK__fish_por__BE0CD9EE2D94B3B9");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("fish_port", (string)null);
                });

            modelBuilder.Entity("testdb.Models.FishTypeFamaille", b =>
                {
                    b.Property<long>("IdTypeFamaille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("idTypeFamaille");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("IdTypeFamaille"));

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("TypeFamaille")
                        .HasColumnType("longtext");

                    b.HasKey("IdTypeFamaille")
                        .HasName("PK__fish_Typ__9820EADC476505A7");

                    b.HasIndex("IdGroup");

                    b.ToTable("fish_TypeFamaille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingEntete", b =>
                {
                    b.Property<int>("IdBookingEntete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBookingEntete");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBookingEntete"));

                    b.Property<DateTime?>("BookingInDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bookingInDate");

                    b.Property<DateTime?>("BookingOutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bookingOutDate");

                    b.Property<bool?>("Cancel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cancel");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime")
                        .HasColumnName("cancelDate");

                    b.Property<bool?>("CheckIn")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkIn");

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime")
                        .HasColumnName("checkInDate");

                    b.Property<bool?>("CheckOut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkOut");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime")
                        .HasColumnName("checkOutDate");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("InfoClients")
                        .HasColumnType("longtext")
                        .HasColumnName("infoClients");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<int?>("NbNights")
                        .HasColumnType("int")
                        .HasColumnName("nbNights");

                    b.Property<int?>("NumBooking")
                        .HasColumnType("int")
                        .HasColumnName("numBooking");

                    b.Property<decimal?>("TotalEnteteHt")
                        .HasColumnType("money")
                        .HasColumnName("totalEnteteHT");

                    b.Property<decimal?>("TotalEnteteTtc")
                        .HasColumnType("money")
                        .HasColumnName("totalEnteteTTC");

                    b.Property<decimal?>("TotalEnteteUnPaye")
                        .HasColumnType("money")
                        .HasColumnName("totalEnteteUnPaye");

                    b.Property<int?>("TtNbGuest")
                        .HasColumnType("int")
                        .HasColumnName("tt_NbGuest");

                    b.HasKey("IdBookingEntete")
                        .HasName("PK__hotel_B___EF8BA5E9340E3854");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("hotel_B_BookingEntete", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingExtra", b =>
                {
                    b.Property<int>("IdBookingExtra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBookingExtra");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBookingExtra"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int?>("IdBookingEntete")
                        .HasColumnType("int")
                        .HasColumnName("idBookingEntete");

                    b.Property<int?>("IdExtras")
                        .HasColumnType("int")
                        .HasColumnName("idExtras");

                    b.Property<decimal?>("PrixExtra")
                        .HasColumnType("money")
                        .HasColumnName("prixExtra");

                    b.Property<int?>("Qte")
                        .HasColumnType("int")
                        .HasColumnName("qte");

                    b.Property<decimal?>("TotalExtras")
                        .HasColumnType("money")
                        .HasColumnName("totalExtras");

                    b.HasKey("IdBookingExtra")
                        .HasName("PK__Hotel_B___C131B493378C5998");

                    b.HasIndex("IdBookingEntete");

                    b.HasIndex("IdExtras");

                    b.ToTable("Hotel_B_BookingExtras", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingInvite", b =>
                {
                    b.Property<int>("IdBookingInvite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBookingInvite");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBookingInvite"));

                    b.Property<int?>("AgeInvite")
                        .HasColumnType("int")
                        .HasColumnName("ageInvite");

                    b.Property<string>("CinInvite")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cinInvite");

                    b.Property<int?>("IdBookingEntete")
                        .HasColumnType("int")
                        .HasColumnName("idBookingEntete");

                    b.Property<string>("Nationalite")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nationalite");

                    b.Property<string>("NomInvite")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomInvite");

                    b.Property<string>("PrenomInvite")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("prenomInvite");

                    b.Property<string>("SexeInvite")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sexeInvite");

                    b.HasKey("IdBookingInvite")
                        .HasName("PK__Hotel_B___8A4162E267075D60");

                    b.HasIndex("IdBookingEntete");

                    b.ToTable("Hotel_B_BookingInvites", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingLigne", b =>
                {
                    b.Property<int>("IdBookingLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBookingLigne");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBookingLigne"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("Guests")
                        .HasColumnType("int")
                        .HasColumnName("guests");

                    b.Property<int?>("IdBookingEntete")
                        .HasColumnType("int")
                        .HasColumnName("idBookingEntete");

                    b.Property<int?>("IdRoomType")
                        .HasColumnType("int")
                        .HasColumnName("idRoomType");

                    b.Property<int?>("IdUnit")
                        .HasColumnType("int")
                        .HasColumnName("idUnit");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("LgnTva")
                        .HasColumnType("int")
                        .HasColumnName("lgnTVA");

                    b.Property<bool?>("PriceModel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("priceModel");

                    b.Property<decimal?>("PrixHt")
                        .HasColumnType("money")
                        .HasColumnName("prixHT");

                    b.Property<decimal?>("PrixTtc")
                        .HasColumnType("money")
                        .HasColumnName("prixTTC");

                    b.Property<decimal?>("TtprixHt")
                        .HasColumnType("money")
                        .HasColumnName("TTPrix_HT");

                    b.Property<decimal?>("TtprixTtc")
                        .HasColumnType("money")
                        .HasColumnName("TTPrix_TTC");

                    b.HasKey("IdBookingLigne")
                        .HasName("PK__Hotel_B___D0F4C35EB8625D64");

                    b.HasIndex("IdBookingEntete");

                    b.HasIndex("IdRoomType");

                    b.HasIndex("IdUnit");

                    b.HasIndex("IdUser");

                    b.ToTable("Hotel_B_BookingLigne", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingPayment", b =>
                {
                    b.Property<int>("IdBookingPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idBookingPayment");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBookingPayment"));

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DatePayment")
                        .HasColumnType("datetime")
                        .HasColumnName("datePayment");

                    b.Property<int?>("IdBookingEntete")
                        .HasColumnType("int")
                        .HasColumnName("idBookingEntete");

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("money")
                        .HasColumnName("montant");

                    b.HasKey("IdBookingPayment")
                        .HasName("PK__Hotel_B___0E4EF227B98C8182");

                    b.HasIndex("IdBookingEntete");

                    b.HasIndex("IdModRglm");

                    b.ToTable("Hotel_B_BookingPayment", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelBFilleInBookingEntete", b =>
                {
                    b.Property<int?>("IdBookingEntete")
                        .HasColumnType("int")
                        .HasColumnName("idBookingEntete");

                    b.Property<int?>("IdFille")
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    b.HasIndex("IdBookingEntete");

                    b.HasIndex("IdFille");

                    b.ToTable("hotel_B_FilleInBookingEntete", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelSCategorie", b =>
                {
                    b.Property<int>("IdCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategorie");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCategorie"));

                    b.Property<string>("CategName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("categName");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.HasKey("IdCategorie")
                        .HasName("PK__hotel_S___8A3D24089B0DDAC1");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("hotel_S_Categorie", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelSEquipement", b =>
                {
                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdRoomType")
                        .HasColumnType("int")
                        .HasColumnName("idRoomType");

                    b.Property<string>("TextEquip")
                        .HasColumnType("longtext")
                        .HasColumnName("textEquip");

                    b.Property<string>("ValeurEquip")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("valeurEquip");

                    b.HasIndex("IdRoomType");

                    b.ToTable("hotel_S_Equipements", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelSExtra", b =>
                {
                    b.Property<int>("IdExtras")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idExtras");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdExtras"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("DescExtras")
                        .HasColumnType("longtext")
                        .HasColumnName("descExtras");

                    b.Property<string>("ExtrasName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("extrasName");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdTaxeExtras")
                        .HasColumnType("int")
                        .HasColumnName("idTaxeExtras");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("PhotoExtras")
                        .HasColumnType("longtext")
                        .HasColumnName("photoExtras");

                    b.Property<decimal?>("PrixHt")
                        .HasColumnType("money")
                        .HasColumnName("prix_HT");

                    b.Property<decimal?>("PrixTtc")
                        .HasColumnType("money")
                        .HasColumnName("prix_TTC");

                    b.Property<string>("QteMax")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("qteMax");

                    b.Property<int?>("SortExtras")
                        .HasColumnType("int")
                        .HasColumnName("sortExtras");

                    b.HasKey("IdExtras")
                        .HasName("PK__hotel_S___56B7E5378449ABA0");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdTaxeExtras");

                    b.HasIndex("IdUser");

                    b.ToTable("hotel_S_Extras", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelSRoomCategorie", b =>
                {
                    b.Property<int>("IdRoomType")
                        .HasColumnType("int")
                        .HasColumnName("idRoomType");

                    b.Property<int>("IdCategorie")
                        .HasColumnType("int")
                        .HasColumnName("idCategorie");

                    b.HasKey("IdRoomType", "IdCategorie");

                    b.ToTable("hotel_S_RoomCategorie", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelSRoomType", b =>
                {
                    b.Property<int>("IdRoomType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRoomType");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRoomType"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("DescRoomType")
                        .HasColumnType("longtext")
                        .HasColumnName("descRoomType");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdTaxeLouer")
                        .HasColumnType("int")
                        .HasColumnName("idTaxeLouer");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("MaxNbGuests")
                        .HasColumnType("int")
                        .HasColumnName("maxNbGuests");

                    b.Property<string>("NameRoomType")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nameRoomType");

                    b.Property<int?>("NbGuests")
                        .HasColumnType("int")
                        .HasColumnName("nbGuests");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("objectType");

                    b.Property<string>("PhotoRoomType")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("photoRoomType");

                    b.Property<int?>("PriceModel")
                        .HasColumnType("int")
                        .HasColumnName("priceModel");

                    b.Property<decimal?>("PrixLouerHt")
                        .HasColumnType("money")
                        .HasColumnName("prixLouer_HT");

                    b.Property<decimal?>("PrixVenteTtc")
                        .HasColumnType("money")
                        .HasColumnName("prixVente_TTC");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sortOrder");

                    b.HasKey("IdRoomType")
                        .HasName("PK__hotel_S___9D810D3FDD8616BB");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdTaxeLouer");

                    b.HasIndex("IdUser");

                    b.ToTable("hotel_S_RoomType", (string)null);
                });

            modelBuilder.Entity("testdb.Models.HotelSUnit", b =>
                {
                    b.Property<int>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUnit");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUnit"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdRoomType")
                        .HasColumnType("int")
                        .HasColumnName("idRoomType");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("UnitName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("unitName");

                    b.HasKey("IdUnit")
                        .HasName("PK__hotel_S___34420721A31B2E3B");

                    b.HasIndex("IdRoomType");

                    b.HasIndex("IdUser");

                    b.ToTable("hotel_S_Units", (string)null);
                });

            modelBuilder.Entity("testdb.Models.MaintAEquipement", b =>
                {
                    b.Property<int>("IdEquipement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEquipement");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEquipement"));

                    b.Property<decimal?>("CoutEquipement")
                        .HasColumnType("money")
                        .HasColumnName("coutEquipement");

                    b.Property<DateTime?>("DateEffet")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEffet");

                    b.Property<DateTime?>("DateGarantie")
                        .HasColumnType("datetime")
                        .HasColumnName("dateGarantie");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("idArticle");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdLign")
                        .HasColumnType("int")
                        .HasColumnName("idLign");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("ModeleEquipement")
                        .HasColumnType("longtext")
                        .HasColumnName("modeleEquipement");

                    b.Property<string>("NumeroSerie")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("numeroSerie");

                    b.HasKey("IdEquipement")
                        .HasName("PK__Maint_A___87E05D1F9B0D1F8B");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdLign");

                    b.HasIndex("IdUser");

                    b.ToTable("Maint_A_Equipements", (string)null);
                });

            modelBuilder.Entity("testdb.Models.MaintRRequest", b =>
                {
                    b.Property<int>("IdRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRequest");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRequest"));

                    b.Property<DateTime?>("DateRequest")
                        .HasColumnType("datetime")
                        .HasColumnName("dateRequest");

                    b.Property<string>("DescMaint")
                        .HasColumnType("longtext")
                        .HasColumnName("descMaint");

                    b.Property<string>("EtatRequest")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("etatRequest");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdEquipement")
                        .HasColumnType("int")
                        .HasColumnName("idEquipement");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdTeam")
                        .HasColumnType("int")
                        .HasColumnName("idTeam");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("LieuMaint")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("lieuMaint");

                    b.Property<string>("NomRequest")
                        .HasColumnType("longtext")
                        .HasColumnName("nomRequest");

                    b.Property<int?>("NumRequest")
                        .HasColumnType("int")
                        .HasColumnName("numRequest");

                    b.Property<int?>("PositionOrdre")
                        .HasColumnType("int")
                        .HasColumnName("positionOrdre");

                    b.Property<string>("ProgressType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("progressType");

                    b.Property<string>("TypeMaint")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("typeMaint");

                    b.HasKey("IdRequest")
                        .HasName("PK__Maint_R___F4A4109EE2C16E2E");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdEquipement");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdTeam");

                    b.HasIndex("IdUser");

                    b.ToTable("Maint_R_Request", (string)null);
                });

            modelBuilder.Entity("testdb.Models.MaintSMember", b =>
                {
                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("idFournisseur");

                    b.Property<int>("IdMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMember");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMember"));

                    b.Property<int?>("IdTeam")
                        .HasColumnType("int")
                        .HasColumnName("idTeam");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdTeam");

                    b.ToTable("Maint_S_Member", (string)null);
                });

            modelBuilder.Entity("testdb.Models.MaintSTeam", b =>
                {
                    b.Property<int>("IdTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTeam");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTeam"));

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomTeam")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomTeam");

                    b.Property<string>("TypeTeam")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("typeTeam");

                    b.HasKey("IdTeam")
                        .HasName("PK__Maint_S___BCD885CFE1376C3C");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Maint_S_Team", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PCaissier", b =>
                {
                    b.Property<int>("IdCaissier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCaissier");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCaissier"));

                    b.Property<bool?>("AdminCaissier")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCaissier");

                    b.Property<bool?>("AnulatinTicket")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("anulatinTicket");

                    b.Property<bool?>("ArchiveChecke")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("archiveChecke");

                    b.Property<bool?>("AvoirCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("avoirCheck");

                    b.Property<bool?>("FermerCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fermerCheck");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NameCaissier")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nameCaissier");

                    b.Property<string>("PassCaissier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("passCaissier");

                    b.Property<bool?>("PrixCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("prixCheck");

                    b.Property<bool?>("RemCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("remCheck");

                    b.HasKey("IdCaissier")
                        .HasName("PK__p_Caissi__A1A63F8DB2FF02F3");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("p_Caissier", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PFamille", b =>
                {
                    b.Property<int?>("IdFamille")
                        .HasColumnType("int")
                        .HasColumnName("idFamille");

                    b.Property<int?>("IdPos")
                        .HasColumnType("int")
                        .HasColumnName("idPos");

                    b.HasIndex("IdFamille");

                    b.HasIndex("IdPos");

                    b.ToTable("p_Famille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PModRglm", b =>
                {
                    b.Property<bool?>("Defaults")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("defaults");

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<int?>("IdPos")
                        .HasColumnType("int")
                        .HasColumnName("idPos");

                    b.HasIndex("IdModRglm");

                    b.HasIndex("IdPos");

                    b.ToTable("p_ModRglm", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PPo", b =>
                {
                    b.Property<int>("IdPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPos");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPos"));

                    b.Property<bool?>("CheckEmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkEmail");

                    b.Property<bool?>("CheckOpenSession")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkOpenSession");

                    b.Property<int?>("ClientDivers")
                        .HasColumnType("int")
                        .HasColumnName("clientDivers");

                    b.Property<string>("EmailSend")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("emailSend");

                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdTreso")
                        .HasColumnType("int")
                        .HasColumnName("idTreso");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("MsgPos")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("msgPos");

                    b.Property<string>("NamePos")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("namePos");

                    b.Property<string>("SouTitrePos")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("souTitrePos");

                    b.Property<string>("TitrePos")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("titrePos");

                    b.Property<string>("TokenPos")
                        .HasColumnType("longtext")
                        .HasColumnName("tokenPos");

                    b.HasKey("IdPos")
                        .HasName("PK__p_Pos__3D78A0B7B32D34E0");

                    b.HasIndex("ClientDivers");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdTreso");

                    b.HasIndex("IdUser");

                    b.ToTable("p_Pos", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PSession", b =>
                {
                    b.Property<int>("IdSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSession");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSession"));

                    b.Property<int?>("CaissierClose")
                        .HasColumnType("int")
                        .HasColumnName("caissierClose");

                    b.Property<int?>("CaissierOpen")
                        .HasColumnType("int")
                        .HasColumnName("caissierOpen");

                    b.Property<bool?>("Closed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("closed");

                    b.Property<DateTime?>("DateClose")
                        .HasColumnType("datetime")
                        .HasColumnName("dateClose");

                    b.Property<DateTime?>("DateOpen")
                        .HasColumnType("datetime")
                        .HasColumnName("dateOpen");

                    b.Property<int?>("IdPos")
                        .HasColumnType("int")
                        .HasColumnName("idPos");

                    b.Property<decimal?>("SoldeClose")
                        .HasColumnType("money")
                        .HasColumnName("soldeClose");

                    b.Property<decimal?>("SoldeOpen")
                        .HasColumnType("money")
                        .HasColumnName("soldeOpen");

                    b.Property<decimal?>("TotalCaissier")
                        .HasColumnType("money")
                        .HasColumnName("totalCaissier");

                    b.HasKey("IdSession")
                        .HasName("PK__p_Sessio__ADE2668F5D786F8C");

                    b.HasIndex("CaissierClose");

                    b.HasIndex("CaissierOpen");

                    b.HasIndex("IdPos");

                    b.ToTable("p_Session", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PTicket", b =>
                {
                    b.Property<int>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTicket");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTicket"));

                    b.Property<DateTime?>("DateCancel")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCancel");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreation");

                    b.Property<int?>("IdCaissier")
                        .HasColumnType("int")
                        .HasColumnName("idCaissier");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdSession")
                        .HasColumnType("int")
                        .HasColumnName("idSession");

                    b.Property<bool?>("IsCancel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isCancel");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isClosed");

                    b.Property<int?>("NumTicket")
                        .HasColumnType("int")
                        .HasColumnName("numTicket");

                    b.Property<decimal?>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.HasKey("IdTicket")
                        .HasName("PK__p_Ticket__22B1456F3065CB00");

                    b.HasIndex("IdCaissier");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdSession");

                    b.ToTable("p_Ticket", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PTicketLigne", b =>
                {
                    b.Property<int>("IdLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLigne");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLigne"));

                    b.Property<bool?>("CheckVenduGrand")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkVenduGrand");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreation");

                    b.Property<int?>("IdTicket")
                        .HasColumnType("int")
                        .HasColumnName("idTicket");

                    b.Property<int?>("Idproduct")
                        .HasColumnType("int")
                        .HasColumnName("idproduct");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("Qte")
                        .HasColumnType("int")
                        .HasColumnName("qte");

                    b.Property<double?>("Rem")
                        .HasColumnType("double")
                        .HasColumnName("rem");

                    b.Property<decimal?>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.Property<string>("Umvente")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("umvente");

                    b.HasKey("IdLigne")
                        .HasName("PK__p_Ticket__408FD6F4123DC466");

                    b.HasIndex("IdTicket");

                    b.HasIndex("Idproduct");

                    b.ToTable("p_Ticket_ligne", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PTicketReg", b =>
                {
                    b.Property<int>("IdPaiment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPaiment");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPaiment"));

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<int?>("IdTicket")
                        .HasColumnType("int")
                        .HasColumnName("idTicket");

                    b.Property<decimal?>("Mantant")
                        .HasColumnType("money")
                        .HasColumnName("mantant");

                    b.HasKey("IdPaiment")
                        .HasName("PK__p_Ticket__430DC81233861774");

                    b.HasIndex("IdModRglm");

                    b.HasIndex("IdTicket");

                    b.ToTable("p_Ticket_Reg", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCCotisation", b =>
                {
                    b.Property<int>("IdCotisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCotisation");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCotisation"));

                    b.Property<double?>("AllFamilial")
                        .HasColumnType("double")
                        .HasColumnName("allFamilial");

                    b.Property<int?>("CodeCotis")
                        .HasColumnType("int")
                        .HasColumnName("codeCotis");

                    b.Property<double?>("CotisationPatr")
                        .HasColumnType("double")
                        .HasColumnName("cotisationPatr");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<double?>("FormationProf")
                        .HasColumnType("double")
                        .HasColumnName("formationProf");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("LibelleCotis")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("libelleCotis");

                    b.Property<double?>("PartSalariel")
                        .HasColumnType("double")
                        .HasColumnName("partSalariel");

                    b.Property<double?>("Plafond")
                        .HasColumnType("double")
                        .HasColumnName("plafond");

                    b.Property<double?>("PrestationSoc")
                        .HasColumnType("double")
                        .HasColumnName("prestationSoc");

                    b.Property<double?>("TauxMajoration1")
                        .HasColumnType("double")
                        .HasColumnName("tauxMajoration1");

                    b.Property<double?>("TauxMajorationAutres")
                        .HasColumnType("double")
                        .HasColumnName("tauxMajorationAutres");

                    b.Property<double?>("TauxPenalite")
                        .HasColumnType("double")
                        .HasColumnName("tauxPenalite");

                    b.Property<string>("TypeCoti")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeCoti");

                    b.HasKey("IdCotisation")
                        .HasName("PK__Paie_C_C__6159288BFAC35F45");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_C_Cotisations", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCRubrique", b =>
                {
                    b.Property<int>("IdRubrique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRubrique");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRubrique"));

                    b.Property<string>("CodeExo")
                        .HasColumnType("longtext")
                        .HasColumnName("codeExo");

                    b.Property<int?>("CodeRubrique")
                        .HasColumnType("int")
                        .HasColumnName("codeRubrique");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<bool?>("Imposable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("imposable");

                    b.Property<string>("LibelleRubrique")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("libelleRubrique");

                    b.Property<bool?>("Positive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("positive");

                    b.Property<double?>("Taux")
                        .HasColumnType("double")
                        .HasColumnName("taux");

                    b.Property<double?>("TauxMajoration1")
                        .HasColumnType("double")
                        .HasColumnName("tauxMajoration1");

                    b.Property<double?>("TauxMajorationAutres")
                        .HasColumnType("double")
                        .HasColumnName("tauxMajorationAutres");

                    b.Property<double?>("TauxPenalite")
                        .HasColumnType("double")
                        .HasColumnName("tauxPenalite");

                    b.Property<double?>("Valeur")
                        .HasColumnType("double")
                        .HasColumnName("valeur");

                    b.HasKey("IdRubrique")
                        .HasName("PK__Paie_C_R__72CA0C17E9CC074A");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_C_Rubriques", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCRubriquesExo", b =>
                {
                    b.Property<int>("IdExo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idExo");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdExo"));

                    b.Property<string>("CodeExo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("codeExo");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("LibelleExo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("libelleExo");

                    b.HasKey("IdExo")
                        .HasName("PK__Paie_C_R__3F0AA960AF69F1C7");

                    b.ToTable("Paie_C_RubriquesExo", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCVariable", b =>
                {
                    b.Property<int>("IdVariable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVariable");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdVariable"));

                    b.Property<string>("CodeVar")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codeVar");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("LibelleVar")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("libelleVar");

                    b.Property<bool?>("PropreSal")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("propreSal");

                    b.Property<decimal?>("ValeurVar")
                        .HasColumnType("money")
                        .HasColumnName("valeurVar");

                    b.HasKey("IdVariable")
                        .HasName("PK__Paie_C_V__EF2620BCC122025B");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_C_Variables", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculAvance", b =>
                {
                    b.Property<int>("IdAvance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAvance");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAvance"));

                    b.Property<bool?>("Cloturer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cloturer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateAvance")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAvance");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("money")
                        .HasColumnName("montant");

                    b.HasKey("IdAvance")
                        .HasName("PK__Paie_Cal__B1657DC64C0008D9");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Calcul_Avance", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculBulletin", b =>
                {
                    b.Property<int>("IdBulletin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBulletin"));

                    b.Property<bool?>("Cloturer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cloturer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("DescPaie")
                        .HasColumnType("longtext")
                        .HasColumnName("descPaie");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("Mois")
                        .HasColumnType("int")
                        .HasColumnName("mois");

                    b.Property<int?>("NumBulletin")
                        .HasColumnType("int")
                        .HasColumnName("numBulletin");

                    b.Property<DateTime?>("PeriodeD")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeD");

                    b.Property<DateTime?>("PeriodeF")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeF");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdBulletin")
                        .HasName("PK__Paie_Cal__66989D1EC8F3C161");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Calcul_bulletin", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculBulletinLigne", b =>
                {
                    b.Property<int>("IdBulletinLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdBulletinLigne"));

                    b.Property<int?>("IdBulletin")
                        .HasColumnType("int");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("NbHeurSup")
                        .HasColumnType("int")
                        .HasColumnName("nbHeurSup");

                    b.Property<int?>("NbJours")
                        .HasColumnType("int")
                        .HasColumnName("nbJours");

                    b.Property<int?>("Nbconge")
                        .HasColumnType("int")
                        .HasColumnName("nbconge");

                    b.Property<int?>("NombreHeurs")
                        .HasColumnType("int")
                        .HasColumnName("nombreHeurs");

                    b.Property<double?>("SalaireBase")
                        .HasColumnType("double");

                    b.Property<double?>("SalaireTotal")
                        .HasColumnType("double")
                        .HasColumnName("salaireTotal");

                    b.Property<double?>("TotalKgs")
                        .HasColumnType("double")
                        .HasColumnName("totalKgs");

                    b.Property<double?>("TotalPrixKgs")
                        .HasColumnType("double")
                        .HasColumnName("totalPrixKgs");

                    b.Property<double?>("TotalPrixSupp")
                        .HasColumnType("double")
                        .HasColumnName("totalPrixSupp");

                    b.HasKey("IdBulletinLigne")
                        .HasName("PK__Paie_Cal__13B8C3BB214F0CFF");

                    b.HasIndex("IdBulletin");

                    b.HasIndex("IdEmploye");

                    b.ToTable("Paie_Calcul_bulletin_ligne", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculConge", b =>
                {
                    b.Property<int>("IdCng")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCng");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCng"));

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("NbJours")
                        .HasColumnType("int")
                        .HasColumnName("nbJours");

                    b.Property<DateTime?>("PeriodeDebut")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeDebut");

                    b.Property<DateTime?>("PeriodeFin")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeFin");

                    b.HasKey("IdCng")
                        .HasName("PK__Paie_Cal__398F16C83A17AFA3");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Calcul_Conges", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculEntete", b =>
                {
                    b.Property<int>("IdEntete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEntete");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEntete"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<double?>("HS0")
                        .HasColumnType("double")
                        .HasColumnName("hS0");

                    b.Property<double?>("HS100")
                        .HasColumnType("double")
                        .HasColumnName("hS100");

                    b.Property<double?>("HS25")
                        .HasColumnType("double")
                        .HasColumnName("hS25");

                    b.Property<double?>("HS50")
                        .HasColumnType("double")
                        .HasColumnName("hS50");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGrpEnt")
                        .HasColumnType("int")
                        .HasColumnName("idGrpEnt");

                    b.Property<double?>("JoursTravail")
                        .HasColumnType("double")
                        .HasColumnName("joursTravail");

                    b.Property<decimal?>("SalaireBase")
                        .HasColumnType("money")
                        .HasColumnName("salaireBase");

                    b.Property<decimal?>("TotalBrut")
                        .HasColumnType("money")
                        .HasColumnName("totalBrut");

                    b.HasKey("IdEntete")
                        .HasName("PK__Paie_Cal__D60AEBB80E676EE7");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGrpEnt");

                    b.ToTable("Paie_Calcul_Entete", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculGrpEntete", b =>
                {
                    b.Property<int>("IdGrpEnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGrpEnt");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdGrpEnt"));

                    b.Property<bool?>("Cloturer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cloturer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DatePaie")
                        .HasColumnType("datetime")
                        .HasColumnName("datePaie");

                    b.Property<string>("DescPaie")
                        .HasColumnType("longtext")
                        .HasColumnName("descPaie");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("Mois")
                        .HasColumnType("int")
                        .HasColumnName("mois");

                    b.Property<int?>("NumPaie")
                        .HasColumnType("int")
                        .HasColumnName("numPaie");

                    b.Property<DateTime?>("PeriodeD")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeD");

                    b.Property<DateTime?>("PeriodeF")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeF");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdGrpEnt")
                        .HasName("PK__Paie_Cal__576CEFB610A65BCB");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Calcul_GrpEntete", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieCalculLigneRubrique", b =>
                {
                    b.Property<int>("IdLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLigne");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLigne"));

                    b.Property<decimal?>("Base")
                        .HasColumnType("money")
                        .HasColumnName("base");

                    b.Property<int?>("CodeRubrique")
                        .HasColumnType("int")
                        .HasColumnName("codeRubrique");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<decimal?>("Gains")
                        .HasColumnType("money")
                        .HasColumnName("gains");

                    b.Property<int?>("IdCotisation")
                        .HasColumnType("int")
                        .HasColumnName("idCotisation");

                    b.Property<int?>("IdEntete")
                        .HasColumnType("int")
                        .HasColumnName("idEntete");

                    b.Property<int?>("IdPret")
                        .HasColumnType("int")
                        .HasColumnName("idPret");

                    b.Property<int?>("IdRubrique")
                        .HasColumnType("int")
                        .HasColumnName("idRubrique");

                    b.Property<string>("LibelleRubrique")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("libelleRubrique");

                    b.Property<int?>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<decimal?>("Retenues")
                        .HasColumnType("money")
                        .HasColumnName("retenues");

                    b.Property<double?>("Taux")
                        .HasColumnType("double")
                        .HasColumnName("taux");

                    b.Property<string>("TypeRubrique")
                        .HasColumnType("longtext")
                        .HasColumnName("typeRubrique");

                    b.Property<int?>("Valeur")
                        .HasColumnType("int")
                        .HasColumnName("valeur");

                    b.HasKey("IdLigne")
                        .HasName("PK__Paie_Cal__408FD6F4B693FF52");

                    b.HasIndex("IdEntete");

                    b.ToTable("Paie_Calcul_LigneRubrique", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieEConge", b =>
                {
                    b.Property<int>("IdConge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idConge");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdConge"));

                    b.Property<int?>("Annee")
                        .HasColumnType("int")
                        .HasColumnName("annee");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<double?>("JCongeN")
                        .HasColumnType("double")
                        .HasColumnName("jCongeN");

                    b.Property<double?>("JCongeN1")
                        .HasColumnType("double")
                        .HasColumnName("jCongeN_1");

                    b.Property<double?>("JConsommes")
                        .HasColumnType("double")
                        .HasColumnName("jConsommes");

                    b.Property<double?>("JRestes")
                        .HasColumnType("double")
                        .HasColumnName("jRestes");

                    b.Property<int?>("NumberMonths")
                        .HasColumnType("int")
                        .HasColumnName("numberMonths");

                    b.HasKey("IdConge")
                        .HasName("PK__Paie_E_C__51C97AAB85C611E9");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_E_Conges", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieEContrat", b =>
                {
                    b.Property<int>("IdContrat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idContrat");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdContrat"));

                    b.Property<DateTime?>("DateContrat")
                        .HasColumnType("datetime")
                        .HasColumnName("dateContrat");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdProfil")
                        .HasColumnType("int")
                        .HasColumnName("idProfil");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NumContrat")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("numContrat");

                    b.Property<string>("ObservationC")
                        .HasColumnType("longtext")
                        .HasColumnName("observationC");

                    b.Property<DateTime?>("PeriodeD")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeD");

                    b.Property<DateTime?>("PeriodeF")
                        .HasColumnType("datetime")
                        .HasColumnName("periodeF");

                    b.HasKey("IdContrat")
                        .HasName("PK__Paie_E_C__2A0DE1E8B3429FB7");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdProfil");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_E_Contrat", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieEEmploye", b =>
                {
                    b.Property<int>("IdEmploye")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEmploye"));

                    b.Property<int?>("Abattement")
                        .HasColumnType("int")
                        .HasColumnName("abattement");

                    b.Property<string>("Adresse")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("adresse");

                    b.Property<string>("Banque")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("banque");

                    b.Property<string>("BusStation")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("busStation");

                    b.Property<bool?>("CheckPointage")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkPointage");

                    b.Property<bool?>("CheckSortie")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkSortie");

                    b.Property<string>("CinEmployee")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cinEmployee");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateAssurRetraite")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAssurRetraite");

                    b.Property<DateTime?>("DateAssurVie")
                        .HasColumnType("datetime")
                        .HasColumnName("dateAssurVie");

                    b.Property<DateTime?>("DateEntree")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEntree");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime")
                        .HasColumnName("dateNaissance");

                    b.Property<DateTime?>("DateSortie")
                        .HasColumnType("datetime")
                        .HasColumnName("dateSortie");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("EmpCadre")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("empCadre");

                    b.Property<string>("Genre")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("genre");

                    b.Property<int?>("IdCategorie")
                        .HasColumnType("int")
                        .HasColumnName("idCategorie");

                    b.Property<int?>("IdDepartement")
                        .HasColumnType("int")
                        .HasColumnName("idDepartement");

                    b.Property<int?>("IdFonction")
                        .HasColumnType("int")
                        .HasColumnName("idFonction");

                    b.Property<int>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<int?>("IdNiveau")
                        .HasColumnType("int")
                        .HasColumnName("idNiveau");

                    b.Property<int?>("IdPlanning")
                        .HasColumnType("int")
                        .HasColumnName("idPlanning");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdUserDevice")
                        .HasColumnType("int")
                        .HasColumnName("idUserDevice");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("idVille");

                    b.Property<string>("LieuNaissance")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("lieuNaissance");

                    b.Property<string>("Matricule")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("matricule");

                    b.Property<string>("Nationalite")
                        .HasColumnType("longtext")
                        .HasColumnName("nationalite");

                    b.Property<int?>("NbEnfants")
                        .HasColumnType("int")
                        .HasColumnName("nbEnfants");

                    b.Property<string>("NomEmployee")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomEmployee");

                    b.Property<string>("NumCarte")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numCarte");

                    b.Property<string>("NumCompte")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("numCompte");

                    b.Property<string>("NumDeclareEmp")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("numDeclareEmp");

                    b.Property<string>("Observation")
                        .HasColumnType("longtext")
                        .HasColumnName("observation");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext")
                        .HasColumnName("photo");

                    b.Property<double?>("PlafondAssurRetraite")
                        .HasColumnType("double")
                        .HasColumnName("plafondAssurRetraite");

                    b.Property<double?>("PlafondAssurVie")
                        .HasColumnType("double")
                        .HasColumnName("plafondAssurVie");

                    b.Property<string>("PrenomEmployee")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("prenomEmployee");

                    b.Property<double?>("PrixHeurSup")
                        .HasColumnType("double");

                    b.Property<double?>("PrixKgs")
                        .HasColumnType("double");

                    b.Property<double?>("PrixParHeur")
                        .HasColumnType("double");

                    b.Property<string>("Recharge")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("recharge");

                    b.Property<decimal?>("SalaireBase")
                        .HasColumnType("money")
                        .HasColumnName("salaireBase");

                    b.Property<bool?>("SalaireFix")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("salaireFix");

                    b.Property<string>("SitFamiliale")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("sitFamiliale");

                    b.Property<string>("Telephone")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("telephone");

                    b.Property<string>("Titre")
                        .HasColumnType("longtext")
                        .HasColumnName("titre");

                    b.Property<string>("TraiteAssurRetraite")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("traiteAssurRetraite");

                    b.Property<string>("TraiteAssurVie")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("traiteAssurVie");

                    b.Property<string>("TypePaie")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("typePaie");

                    b.Property<string>("TypeSalarie")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("typeSalarie");

                    b.HasKey("IdEmploye")
                        .HasName("PK__Paie_E_E__97B32F2A937E683A");

                    b.HasIndex("IdCategorie");

                    b.HasIndex("IdDepartement");

                    b.HasIndex("IdFonction");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdModRglm");

                    b.HasIndex("IdNiveau");

                    b.HasIndex("IdPlanning");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserDevice");

                    b.HasIndex("IdVille");

                    b.ToTable("Paie_E_Employe", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieEPret", b =>
                {
                    b.Property<int>("IdPret")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPret");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPret"));

                    b.Property<string>("CodeRubrique")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codeRubrique");

                    b.Property<DateTime?>("DateEcheanceD")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEcheanceD");

                    b.Property<DateTime?>("DateEcheanceF")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEcheanceF");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<decimal?>("MontantDernierEcheance")
                        .HasColumnType("money")
                        .HasColumnName("montantDernierEcheance");

                    b.Property<decimal?>("MontantEcheance")
                        .HasColumnType("money")
                        .HasColumnName("montantEcheance");

                    b.Property<decimal?>("MontantTotal")
                        .HasColumnType("money")
                        .HasColumnName("montantTotal");

                    b.Property<int?>("NbEcheance")
                        .HasColumnType("int")
                        .HasColumnName("nbEcheance");

                    b.Property<string>("Observation")
                        .HasColumnType("longtext")
                        .HasColumnName("observation");

                    b.Property<decimal?>("Reliquant")
                        .HasColumnType("money")
                        .HasColumnName("reliquant");

                    b.HasKey("IdPret")
                        .HasName("PK__Paie_E_P__B41BA71774103744");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_E_Prets", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieICategorie", b =>
                {
                    b.Property<int>("IdCategorie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategorie");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCategorie"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomCategorie")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomCategorie");

                    b.HasKey("IdCategorie")
                        .HasName("PK__paie_I_C__8A3D2408E6D8ED01");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("paie_I_Categorie", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieIDepartement", b =>
                {
                    b.Property<int>("IdDepartement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDepartement");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDepartement"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomDepartement")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomDepartement");

                    b.HasKey("IdDepartement")
                        .HasName("PK__paie_I_D__9E93B3EBC1C59A28");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("paie_I_Departement", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieIFonction", b =>
                {
                    b.Property<int>("IdFonction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFonction");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFonction"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomFonction")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomFonction");

                    b.HasKey("IdFonction")
                        .HasName("PK__paie_I_F__14817A4816B153EE");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("paie_I_Fonction", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieINiveau", b =>
                {
                    b.Property<int>("IdNiveau")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idNiveau");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdNiveau"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomNiveau")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomNiveau");

                    b.HasKey("IdNiveau")
                        .HasName("PK__paie_I_N__8D81C23E32EBD846");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("paie_I_Niveau", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieIProfilContrat", b =>
                {
                    b.Property<int>("IdProfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProfil");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdProfil"));

                    b.Property<bool?>("AllFamiliel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allFamiliel");

                    b.Property<bool?>("CotisationPatr")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("cotisationPatr");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<bool?>("FormationProf")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("formationProf");

                    b.Property<bool?>("IR")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("iR");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomProfil")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomProfil");

                    b.Property<bool?>("PartSalariel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("partSalariel");

                    b.Property<double?>("PlafondIr")
                        .HasColumnType("double")
                        .HasColumnName("plafondIR");

                    b.Property<string>("TypeProfil")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("typeProfil");

                    b.HasKey("IdProfil")
                        .HasName("PK__paie_I_P__2389837BE75EC0D2");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("paie_I_ProfilContrat", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieITauxFraisProf", b =>
                {
                    b.Property<int>("IdTaux")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTaux");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTaux"));

                    b.Property<string>("CodeTaux")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("codeTaux");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("LibelleTaux")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("libelleTaux");

                    b.Property<double?>("Plafond")
                        .HasColumnType("double")
                        .HasColumnName("plafond");

                    b.Property<string>("RefTaux")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("refTaux");

                    b.Property<double?>("Taux")
                        .HasColumnType("double")
                        .HasColumnName("taux");

                    b.HasKey("IdTaux")
                        .HasName("PK__paie_I_T__C3E0C46D489FAE11");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("paie_I_TauxFraisProf", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaiePPointage", b =>
                {
                    b.Property<int>("IdPointage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPointage");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPointage"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("DescrPointage")
                        .HasColumnType("longtext")
                        .HasColumnName("descrPointage");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Mois")
                        .HasColumnType("longtext")
                        .HasColumnName("mois");

                    b.Property<int?>("NumPointage")
                        .HasColumnType("int")
                        .HasColumnName("numPointage");

                    b.HasKey("IdPointage")
                        .HasName("PK__Paie_P_P__3875EEE7C9C81FCF");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_P_POINTAGE", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaiePPointageLigne", b =>
                {
                    b.Property<int>("IdPointageLigne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPointageLigne");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPointageLigne"));

                    b.Property<TimeOnly?>("HeureEntree")
                        .HasColumnType("time(6)");

                    b.Property<TimeOnly?>("HeureSortire")
                        .HasColumnType("time(6)");

                    b.Property<int?>("HeureSupp")
                        .HasColumnType("int")
                        .HasColumnName("heureSupp");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdPointage")
                        .HasColumnType("int")
                        .HasColumnName("idPointage");

                    b.Property<double?>("Kgs")
                        .HasColumnType("double")
                        .HasColumnName("kgs");

                    b.HasKey("IdPointageLigne")
                        .HasName("PK__Paie_P_P__4F9C0CAD1A5A5B15");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdPointage");

                    b.ToTable("Paie_P_POINTAGE_LIGNE", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieZLogDatum", b =>
                {
                    b.Property<int>("IdLogData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLogData");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdLogData"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateTimeRecord")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTimeRecord");

                    b.Property<int?>("IdEmploye")
                        .HasColumnType("int")
                        .HasColumnName("idEmploye");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdUserDevice")
                        .HasColumnType("int")
                        .HasColumnName("idUserDevice");

                    b.Property<TimeOnly?>("TimeRecord")
                        .HasColumnType("time(6)")
                        .HasColumnName("timeRecord");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("uniqueId");

                    b.HasKey("IdLogData")
                        .HasName("PK__Paie_Z_L__A49937F43BE3FFFF");

                    b.HasIndex("IdEmploye");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserDevice");

                    b.ToTable("Paie_Z_LogData", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieZPlanning", b =>
                {
                    b.Property<int>("IdPlanning")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPlanning");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdPlanning"));

                    b.Property<bool?>("CheckPause")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkPause");

                    b.Property<TimeOnly?>("HeureDepartA")
                        .HasColumnType("time(6)")
                        .HasColumnName("heureDepartA");

                    b.Property<TimeOnly?>("HeureDepartDe")
                        .HasColumnType("time(6)")
                        .HasColumnName("heureDepartDe");

                    b.Property<TimeOnly?>("HeurePauseA")
                        .HasColumnType("time(6)")
                        .HasColumnName("heurePauseA");

                    b.Property<TimeOnly?>("HeurePauseDe")
                        .HasColumnType("time(6)")
                        .HasColumnName("heurePauseDe");

                    b.Property<TimeOnly?>("HeureSortie")
                        .HasColumnType("time(6)")
                        .HasColumnName("heureSortie");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NomPlanning")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomPlanning");

                    b.HasKey("IdPlanning")
                        .HasName("PK__Paie_Z_P__B185E000B4197857");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Z_Planning", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieZUserDevice", b =>
                {
                    b.Property<int>("IdUserDevice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUserDevice");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUserDevice"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("EnrolNumber")
                        .HasColumnType("int")
                        .HasColumnName("enrolNumber");

                    b.Property<int?>("IdDevice")
                        .HasColumnType("int")
                        .HasColumnName("idDevice");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordU")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("passwordU");

                    b.HasKey("IdUserDevice")
                        .HasName("PK__Paie_Z_U__65DA88BCEC24D13B");

                    b.HasIndex("IdDevice");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Z_UserDevice", (string)null);
                });

            modelBuilder.Entity("testdb.Models.PaieZZktdevice", b =>
                {
                    b.Property<int>("IdDevice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDevice");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDevice"));

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("IpDevice")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ipDevice");

                    b.Property<int?>("MachingNumber")
                        .HasColumnType("int")
                        .HasColumnName("machingNumber");

                    b.Property<string>("NameDevice")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nameDevice");

                    b.Property<int?>("PortDevice")
                        .HasColumnType("int")
                        .HasColumnName("portDevice");

                    b.HasKey("IdDevice")
                        .HasName("PK__Paie_Z_Z__FB43DB0429D0A54F");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("Paie_Z_ZKTDevices", (string)null);
                });

            modelBuilder.Entity("testdb.Models.RReglement", b =>
                {
                    b.Property<int>("IdReglement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idReglement");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdReglement"));

                    b.Property<string>("Banque")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("banque");

                    b.Property<string>("CodeType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codeType");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateEcheanche")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEcheanche");

                    b.Property<DateTime?>("DateReglement")
                        .HasColumnType("datetime")
                        .HasColumnName("dateReglement");

                    b.Property<string>("EtatReg")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("etatReg");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdEntet")
                        .HasColumnType("int")
                        .HasColumnName("idEntet");

                    b.Property<int?>("IdEntetFish")
                        .HasColumnType("int")
                        .HasColumnName("idEntetFish");

                    b.Property<int?>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("idFournisseur");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<int?>("IdTreso")
                        .HasColumnType("int")
                        .HasColumnName("idTreso");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Info")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("info");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("money")
                        .HasColumnName("montant");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.Property<string>("NumCheque")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("numCheque");

                    b.Property<int?>("NumReglement")
                        .HasColumnType("int")
                        .HasColumnName("numReglement");

                    b.HasKey("IdReglement")
                        .HasName("PK__r_Reglem__DB4C7B8E33384D86");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdEntet");

                    b.HasIndex("IdEntetFish");

                    b.HasIndex("IdFournisseur");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdModRglm");

                    b.HasIndex("IdTreso");

                    b.HasIndex("IdUser");

                    b.ToTable("r_Reglement", (string)null);
                });

            modelBuilder.Entity("testdb.Models.RReglementInFille", b =>
                {
                    b.Property<int?>("IdFille")
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    b.Property<int?>("IdReglement")
                        .HasColumnType("int")
                        .HasColumnName("idReglement");

                    b.HasIndex("IdFille");

                    b.HasIndex("IdReglement");

                    b.ToTable("r_ReglementInFille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SDossier", b =>
                {
                    b.Property<int>("IdDossier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDossier"));

                    b.Property<string>("Activite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Adresse")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cnss")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_creation");

                    b.Property<DateTime?>("DateExeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateExeEnd");

                    b.Property<DateTime?>("DateExeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("dateExeStart");

                    b.Property<string>("DomainName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("domainName");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EntetDossier")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Entet_dossier");

                    b.Property<string>("Fix")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ice")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("Iff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Logo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NomDossier")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Nom_dossier");

                    b.Property<string>("Objectif")
                        .HasColumnType("longtext");

                    b.Property<string>("Patente")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Pays")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PiedDossier")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Pied_dossier");

                    b.Property<string>("Rc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sitee")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StyleDossier")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Style_dossier");

                    b.Property<string>("Tele")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ville")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WooClientKey")
                        .HasColumnType("longtext")
                        .HasColumnName("wooClientKey");

                    b.Property<string>("WooClientSecret")
                        .HasColumnType("longtext")
                        .HasColumnName("wooClientSecret");

                    b.HasKey("IdDossier")
                        .HasName("PK__s_Dossie__43081945B4A81825");

                    b.HasIndex("IdGroup");

                    b.ToTable("s_Dossier", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SEmailsSetting", b =>
                {
                    b.Property<int>("IdEsettings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idESettings");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdEsettings"));

                    b.Property<bool?>("CheckSmtp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checkSMTP");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("FromNameSm")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fromNameSm");

                    b.Property<string>("HostIm")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("hostIm");

                    b.Property<string>("HostSm")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("hostSm");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("PasswordIm")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("passwordIm");

                    b.Property<string>("PasswordSm")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("passwordSm");

                    b.Property<int?>("PortIm")
                        .HasColumnType("int")
                        .HasColumnName("portIm");

                    b.Property<int?>("PortSm")
                        .HasColumnType("int")
                        .HasColumnName("portSm");

                    b.Property<string>("UrlAttach")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("urlAttach");

                    b.Property<string>("UrlServer")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("urlServer");

                    b.Property<string>("UsernameIm")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("usernameIm");

                    b.Property<string>("UsernameSm")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("usernameSm");

                    b.HasKey("IdEsettings")
                        .HasName("PK__s_Emails__3CB665854665DFA7");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("s_EmailsSettings", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SFille", b =>
                {
                    b.Property<int>("IdFille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFille");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFille"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("NameFile")
                        .HasColumnType("longtext")
                        .HasColumnName("nameFile");

                    b.Property<string>("PathFile")
                        .HasColumnType("longtext")
                        .HasColumnName("pathFile");

                    b.Property<string>("SizeFile")
                        .HasColumnType("longtext")
                        .HasColumnName("sizeFile");

                    b.Property<string>("TypeFile")
                        .HasColumnType("longtext")
                        .HasColumnName("typeFile");

                    b.HasKey("IdFille")
                        .HasName("PK__s_Fille__9670A138AD82BE04");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("s_Fille", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SGroupUser", b =>
                {
                    b.Property<int>("IdGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdGroup"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("DescGroup")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descGroup");

                    b.HasKey("IdGroup")
                        .HasName("PK__s_GroupU__E0CF5D24B3FE570F");

                    b.ToTable("s_GroupUsers", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SLiaisonUser", b =>
                {
                    b.Property<int?>("IdDepot")
                        .HasColumnType("int")
                        .HasColumnName("idDepot");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<int?>("IdTreso")
                        .HasColumnType("int")
                        .HasColumnName("idTreso");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("idVille");

                    b.HasIndex("IdDepot");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdTreso");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVille");

                    b.ToTable("s_LiaisonUsers", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SMenu", b =>
                {
                    b.Property<int>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMenu");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdMenu"));

                    b.Property<string>("CodeMenu")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codeMenu");

                    b.Property<string>("DataModel")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("dataModel");

                    b.Property<string>("NomMenu")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomMenu");

                    b.Property<string>("PhotoMenu")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("photoMenu");

                    b.HasKey("IdMenu")
                        .HasName("PK__s_Menu__C26AF483482986C3");

                    b.ToTable("s_Menu", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SMenuInstall", b =>
                {
                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdMenu")
                        .HasColumnType("int")
                        .HasColumnName("idMenu");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdMenu");

                    b.HasIndex("IdUser");

                    b.ToTable("s_MenuInstall", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SMenuSub", b =>
                {
                    b.Property<int>("IdSubMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSubMenu");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSubMenu"));

                    b.Property<string>("CodeMenu")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codeMenu");

                    b.Property<string>("NamePrincipale")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("namePrincipale");

                    b.Property<string>("NomSubMenu")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomSubMenu");

                    b.HasKey("IdSubMenu")
                        .HasName("PK__s_MenuSu__7821D1082CBCB38C");

                    b.ToTable("s_MenuSub", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SMenuSubInstall", b =>
                {
                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdSubMenu")
                        .HasColumnType("int")
                        .HasColumnName("idSubMenu");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdSubMenu");

                    b.HasIndex("IdUser");

                    b.ToTable("s_MenuSubInstall", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SRole", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<bool?>("DeleteRole")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleteRole");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<bool?>("ImprimerRole")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("imprimerRole");

                    b.Property<bool?>("InsertRole")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("insertRole");

                    b.Property<string>("NameRole")
                        .HasColumnType("longtext")
                        .HasColumnName("nameRole");

                    b.Property<bool?>("SelectAll")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("selectALL");

                    b.Property<bool?>("SelectArticles")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("selectArticles");

                    b.Property<bool?>("SelectByUser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("selectByUser");

                    b.Property<bool?>("SelectDoc")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("selectDoc");

                    b.Property<bool?>("UpdateRole")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("updateRole");

                    b.Property<bool?>("Valider")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("valider");

                    b.HasKey("IdRole")
                        .HasName("PK__s_Roles__E5045C546FDECAAF");

                    b.HasIndex("IdGroup");

                    b.ToTable("s_Roles", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SSetting", b =>
                {
                    b.Property<int>("IdSettings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSettings");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSettings"));

                    b.Property<string>("CurrencyFormat")
                        .HasColumnType("longtext")
                        .HasColumnName("currencyFormat");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("QteFormat")
                        .HasColumnType("longtext")
                        .HasColumnName("qteFormat");

                    b.Property<bool?>("SubDepot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("subDepot");

                    b.Property<bool?>("TtcCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ttcCheck");

                    b.Property<bool?>("TvaCheck")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tvaCheck");

                    b.HasKey("IdSettings")
                        .HasName("PK__s_Settin__C7066F18CFD5BD87");

                    b.HasIndex("IdGroup");

                    b.ToTable("s_Settings", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SUser", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idUser");

                    b.Property<string>("AdresseUser")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("adresseUser");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("EmailUser")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("emailUser");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLoginDate");

                    b.Property<string>("NomUser")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomUser");

                    b.Property<DateTime?>("OutLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("outLoginDate");

                    b.Property<string>("PasswordUser")
                        .HasColumnType("longtext")
                        .HasColumnName("passwordUser");

                    b.Property<string>("TeleUser")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("teleUser");

                    b.Property<string>("TokenLogin")
                        .HasColumnType("longtext")
                        .HasColumnName("tokenLogin");

                    b.Property<bool?>("TypeAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("typeAdmin");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("userName");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("longtext")
                        .HasColumnName("userPhoto");

                    b.HasKey("IdUser")
                        .HasName("PK__s_Users__3717C9821D916FB4");

                    b.HasIndex("IdGroup");

                    b.ToTable("s_Users", (string)null);
                });

            modelBuilder.Entity("testdb.Models.SbCreationBarCode", b =>
                {
                    b.Property<int>("IdCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCreation");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCreation"));

                    b.Property<string>("CodeType")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("codeType");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<double?>("DimensionH")
                        .HasColumnType("double")
                        .HasColumnName("dimensionH");

                    b.Property<double?>("DimensionW")
                        .HasColumnType("double")
                        .HasColumnName("dimensionW");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Meta")
                        .HasColumnType("longtext")
                        .HasColumnName("meta");

                    b.Property<double?>("VBarHeight")
                        .HasColumnType("double")
                        .HasColumnName("vBarHeight");

                    b.Property<double?>("VBarWidth")
                        .HasColumnType("double")
                        .HasColumnName("vBarWidth");

                    b.HasKey("IdCreation")
                        .HasName("PK__sb_Creat__FA6C5830232E1A42");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("sb_CreationBarCode", (string)null);
                });

            modelBuilder.Entity("testdb.Models.ScCalendar", b =>
                {
                    b.Property<int>("IdCalendar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCalendar");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdCalendar"));

                    b.Property<string>("BgColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bgColor");

                    b.Property<string>("BorderColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("borderColor");

                    b.Property<bool?>("Checked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("checked");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("color");

                    b.Property<string>("DragBgColor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dragBgColor");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("name");

                    b.HasKey("IdCalendar")
                        .HasName("PK__sc_calen__B35CADE53E6CEB56");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("sc_calendar", (string)null);
                });

            modelBuilder.Entity("testdb.Models.ScSchedule", b =>
                {
                    b.Property<int>("IdSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSchedule");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSchedule"));

                    b.Property<string>("Body")
                        .HasColumnType("longtext")
                        .HasColumnName("body");

                    b.Property<DateTime?>("Endd")
                        .HasColumnType("datetime")
                        .HasColumnName("endd");

                    b.Property<TimeOnly?>("HeureEndd")
                        .HasColumnType("time(6)")
                        .HasColumnName("heureEndd");

                    b.Property<TimeOnly?>("HeureStart")
                        .HasColumnType("time(6)")
                        .HasColumnName("heureStart");

                    b.Property<int?>("IdCalendar")
                        .HasColumnType("int")
                        .HasColumnName("idCalendar");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<bool?>("IsAllday")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isAllday");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isPrivate");

                    b.Property<string>("NomTier")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nomTier");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("IdSchedule")
                        .HasName("PK__sc_sched__5717CA9456DDDB20");

                    b.HasIndex("IdCalendar");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("sc_schedule", (string)null);
                });

            modelBuilder.Entity("testdb.Models.TClient", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("AdresseClient")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("adresseClient");

                    b.Property<string>("Autorizacion")
                        .HasColumnType("longtext")
                        .HasColumnName("autorizacion");

                    b.Property<string>("BanqueClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("banqueClient");

                    b.Property<string>("CategorieClt")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("categorieClt");

                    b.Property<string>("CinClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cinClient");

                    b.Property<string>("CnssClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cnssClient");

                    b.Property<string>("CodeClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codeClient");

                    b.Property<bool?>("ContratClient")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("contratClient");

                    b.Property<DateTime?>("Createdate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdate");

                    b.Property<bool?>("Distributeur")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("distributeur");

                    b.Property<string>("EmailClient")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailClient");

                    b.Property<string>("FixClient")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fixClient");

                    b.Property<string>("FrmJuridiqueClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("frmJuridiqueClient");

                    b.Property<string>("IceClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iceClient");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("idVille");

                    b.Property<string>("Incoterms")
                        .HasColumnType("longtext")
                        .HasColumnName("incoterms");

                    b.Property<string>("NifClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nifClient");

                    b.Property<string>("NomClient")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomClient");

                    b.Property<string>("OrigineContact")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("origineContact");

                    b.Property<string>("PatenteClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patenteClient");

                    b.Property<string>("PostalClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("postalClient");

                    b.Property<string>("PotentielClt")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("potentielClt");

                    b.Property<string>("Propriete")
                        .HasColumnType("longtext")
                        .HasColumnName("propriete");

                    b.Property<string>("RibClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ribClient");

                    b.Property<string>("SiegeClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("siegeClient");

                    b.Property<string>("Siteweb")
                        .HasColumnType("longtext")
                        .HasColumnName("siteweb");

                    b.Property<decimal?>("SoldAutoriseClient")
                        .HasColumnType("money")
                        .HasColumnName("soldAutoriseClient");

                    b.Property<string>("TeleClient")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("teleClient");

                    b.Property<string>("TypeClient")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("typeClient");

                    b.Property<bool?>("VendeurClient")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("vendeurClient");

                    b.HasKey("IdClient")
                        .HasName("PK__t_Client__A6A610D4B1A3F292");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVille");

                    b.ToTable("t_Client", (string)null);
                });

            modelBuilder.Entity("testdb.Models.TClientCredit", b =>
                {
                    b.Property<decimal?>("Credit")
                        .HasColumnType("money")
                        .HasColumnName("credit");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int")
                        .HasColumnName("idClient");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDossier");

                    b.ToTable("t_ClientCredit", (string)null);
                });

            modelBuilder.Entity("testdb.Models.TFournisseur", b =>
                {
                    b.Property<int>("IdFournisseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idFournisseur");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdFournisseur"));

                    b.Property<string>("AdresseFournisseur")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("adresseFournisseur");

                    b.Property<string>("BanqueFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("banqueFournisseur");

                    b.Property<string>("CategorieFr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("categorieFR");

                    b.Property<string>("CinFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cinFournisseur");

                    b.Property<string>("CnssFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cnssFournisseur");

                    b.Property<string>("CodeFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codeFournisseur");

                    b.Property<bool?>("ContratFournisseur")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("contratFournisseur");

                    b.Property<DateTime?>("Createdate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdate");

                    b.Property<string>("EmailFournisseur")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("emailFournisseur");

                    b.Property<string>("FixFournisseur")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fixFournisseur");

                    b.Property<bool?>("Fournisseur")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fournisseur");

                    b.Property<string>("FrmJuridiqueFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("frmJuridiqueFournisseur");

                    b.Property<string>("IceFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iceFournisseur");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int")
                        .HasColumnName("idPays");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int")
                        .HasColumnName("idVille");

                    b.Property<string>("NifFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nifFournisseur");

                    b.Property<string>("NomFournisseur")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomFournisseur");

                    b.Property<string>("OrigineContactFr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("origineContactFR");

                    b.Property<string>("PatenteFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patenteFournisseur");

                    b.Property<string>("PostalFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("postalFournisseur");

                    b.Property<string>("PotentielFr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("potentielFR");

                    b.Property<string>("RibFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ribFournisseur");

                    b.Property<string>("SiegeFournisseur")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("siegeFournisseur");

                    b.Property<string>("SitewebFr")
                        .HasColumnType("longtext")
                        .HasColumnName("sitewebFr");

                    b.Property<decimal?>("SoldAutoriseFournisseur")
                        .HasColumnType("money")
                        .HasColumnName("soldAutoriseFournisseur");

                    b.Property<bool?>("SousTraitance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sous_traitance");

                    b.Property<string>("TeleFournisseur")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("teleFournisseur");

                    b.Property<string>("TypeFournisseur")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("typeFournisseur");

                    b.HasKey("IdFournisseur")
                        .HasName("PK__t_Fourni__9850876A0EADB6B4");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVille");

                    b.ToTable("t_Fournisseur", (string)null);
                });

            modelBuilder.Entity("testdb.Models.TFournisseurCredit", b =>
                {
                    b.Property<decimal?>("Credit")
                        .HasColumnType("money")
                        .HasColumnName("credit");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdFournisseur")
                        .HasColumnType("int")
                        .HasColumnName("idFournisseur");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdFournisseur");

                    b.ToTable("t_FournisseurCredit", (string)null);
                });

            modelBuilder.Entity("testdb.Models.TSalarie", b =>
                {
                    b.Property<int>("IdSalarie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSalarie");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdSalarie"));

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<DateOnly?>("DateEntree")
                        .HasColumnType("date");

                    b.Property<string>("NomSalarie")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("nomSalarie");

                    b.Property<string>("Post")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("post");

                    b.Property<string>("PrenomSalarie")
                        .IsUnicode(false)
                        .HasColumnType("longtext")
                        .HasColumnName("prenomSalarie");

                    b.Property<double?>("Salaire")
                        .HasColumnType("double")
                        .HasColumnName("salaire");

                    b.HasKey("IdSalarie")
                        .HasName("PK__t_salari__A5800341ABBD796C");

                    b.ToTable("t_salarie", (string)null);
                });

            modelBuilder.Entity("testdb.Models.TrTresorerieEntet", b =>
                {
                    b.Property<int>("IdTresoEntet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTresoEntet");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTresoEntet"));

                    b.Property<string>("Banque")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("banque");

                    b.Property<string>("CodeType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codeType");

                    b.Property<DateTime?>("DateEcheanche")
                        .HasColumnType("datetime")
                        .HasColumnName("dateEcheanche");

                    b.Property<DateTime?>("DateTresoEntet")
                        .HasColumnType("datetime")
                        .HasColumnName("dateTresoEntet");

                    b.Property<string>("DescTresoEntet")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descTresoEntet");

                    b.Property<string>("EtatDoc")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("etatDoc");

                    b.Property<int?>("IdDossier")
                        .HasColumnType("int")
                        .HasColumnName("idDossier");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<int?>("IdModRglm")
                        .HasColumnType("int")
                        .HasColumnName("idModRglm");

                    b.Property<int?>("IdService")
                        .HasColumnType("int")
                        .HasColumnName("idService");

                    b.Property<int?>("IdTreso")
                        .HasColumnType("int")
                        .HasColumnName("idTreso");

                    b.Property<int?>("IdTreso2")
                        .HasColumnType("int")
                        .HasColumnName("idTreso_2");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("money")
                        .HasColumnName("montant");

                    b.Property<string>("NumCheque")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("numCheque");

                    b.Property<int?>("NumTresoEntet")
                        .HasColumnType("int")
                        .HasColumnName("numTresoEntet");

                    b.HasKey("IdTresoEntet")
                        .HasName("PK__tr_Treso__FEA43A3ACFADC22A");

                    b.HasIndex("IdDossier");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdModRglm");

                    b.HasIndex("IdService");

                    b.HasIndex("IdTreso");

                    b.HasIndex("IdTreso2");

                    b.HasIndex("IdUser");

                    b.ToTable("tr_TresorerieEntet", (string)null);
                });

            modelBuilder.Entity("testdb.Models.UUniteMesure", b =>
                {
                    b.Property<int>("IdUnite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUnite");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUnite"));

                    b.Property<string>("DescUnite")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descUnite");

                    b.Property<int?>("IdGroup")
                        .HasColumnType("int")
                        .HasColumnName("idGroup");

                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("idUser");

                    b.Property<bool?>("PrcpUnite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("prcpUnite");

                    b.HasKey("IdUnite")
                        .HasName("PK__u_UniteM__91C8610CE18BAC6D");

                    b.HasIndex("IdGroup");

                    b.HasIndex("IdUser");

                    b.ToTable("u_UniteMesure", (string)null);
                });

            modelBuilder.Entity("EFilleInEmail", b =>
                {
                    b.HasOne("testdb.Models.EEmail", null)
                        .WithMany()
                        .HasForeignKey("IdEmail")
                        .IsRequired()
                        .HasConstraintName("FK__e_FilleIn__idEma__32767D0B");

                    b.HasOne("testdb.Models.SFille", null)
                        .WithMany()
                        .HasForeignKey("IdFille")
                        .IsRequired()
                        .HasConstraintName("FK__e_FilleIn__idFil__336AA144");
                });

            modelBuilder.Entity("ERP_Anass_backend.Models.Article", b =>
                {
                    b.HasOne("ERP_Anass_backend.Models.Familly", "Familly")
                        .WithMany("Article")
                        .HasForeignKey("FamilyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Familly");
                });

            modelBuilder.Entity("PaieEFilleInContrat", b =>
                {
                    b.HasOne("testdb.Models.PaieEContrat", null)
                        .WithMany()
                        .HasForeignKey("IdContrat")
                        .IsRequired()
                        .HasConstraintName("FK__Paie_E_Fi__idCon__3EA749C6");

                    b.HasOne("testdb.Models.SFille", null)
                        .WithMany()
                        .HasForeignKey("IdFille")
                        .IsRequired()
                        .HasConstraintName("FK__Paie_E_Fi__idFil__3F9B6DFF");
                });

            modelBuilder.Entity("SUserDossier", b =>
                {
                    b.HasOne("testdb.Models.SDossier", null)
                        .WithMany()
                        .HasForeignKey("IdDossier")
                        .IsRequired()
                        .HasConstraintName("FK__s_UserDos__idDos__79C80F94");

                    b.HasOne("testdb.Models.SUser", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__s_UserDos__idUse__7ABC33CD");
                });

            modelBuilder.Entity("SUserRole", b =>
                {
                    b.HasOne("testdb.Models.SRole", null)
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK__s_UserRol__idRol__7BB05806");

                    b.HasOne("testdb.Models.SUser", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK__s_UserRol__idUse__7CA47C3F");
                });

            modelBuilder.Entity("testdb.Models.AArticle", b =>
                {
                    b.HasOne("testdb.Models.AFamille", "IdFamilleNavigation")
                        .WithMany("AArticles")
                        .HasForeignKey("IdFamille")
                        .HasConstraintName("FK__a_Article__idFam__7C1A6C5A");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("AArticles")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__a_Article__idGro__7D0E9093");

                    b.HasOne("testdb.Models.BTaxe", "IdTaxeAchatNavigation")
                        .WithMany("AArticleIdTaxeAchatNavigations")
                        .HasForeignKey("IdTaxeAchat")
                        .HasConstraintName("FK__a_Article__idTax__7E02B4CC");

                    b.HasOne("testdb.Models.BTaxe", "IdTaxeVenteNavigation")
                        .WithMany("AArticleIdTaxeVenteNavigations")
                        .HasForeignKey("IdTaxeVente")
                        .HasConstraintName("FK__a_Article__idTax__7EF6D905");

                    b.HasOne("testdb.Models.UUniteMesure", "IdUniteNavigation")
                        .WithMany("AArticles")
                        .HasForeignKey("IdUnite")
                        .HasConstraintName("FK__a_Article__idUni__7FEAFD3E");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("AArticles")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__a_Article__idUse__00DF2177");

                    b.Navigation("IdFamilleNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdTaxeAchatNavigation");

                    b.Navigation("IdTaxeVenteNavigation");

                    b.Navigation("IdUniteNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.AArticleInFille", b =>
                {
                    b.HasOne("testdb.Models.AArticle", "IdArticleNavigation")
                        .WithMany()
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("FK__a_Article__idArt__01D345B0");

                    b.HasOne("testdb.Models.SFille", "IdFilleNavigation")
                        .WithMany()
                        .HasForeignKey("IdFille")
                        .HasConstraintName("FK__a_Article__idFil__02C769E9");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdFilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.ABateau", b =>
                {
                    b.HasOne("testdb.Models.AArticle", "IdArticleNavigation")
                        .WithMany("ABateaus")
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("FK__a_Bateau__idArti__03BB8E22");

                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany("ABateaus")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK__a_Bateau__idClie__04AFB25B");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("testdb.Models.AFamille", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("AFamilles")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__a_Famille__idGro__05A3D694");

                    b.HasOne("testdb.Models.FishNomScientifique", "IdNomScientifiqueNavigation")
                        .WithMany("AFamilles")
                        .HasForeignKey("IdNomScientifique")
                        .HasConstraintName("FK_a_Famillefish_NomScientifique");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("AFamilles")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("FK_a_Famillefish_b_Pays");

                    b.HasOne("testdb.Models.FishTypeFamaille", "IdTypeFamailleNavigation")
                        .WithMany("AFamilles")
                        .HasForeignKey("IdTypeFamaille")
                        .HasConstraintName("FK_a_Famille_fish_TypeFamaille");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("AFamilles")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__a_Famille__idUse__0697FACD");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdNomScientifiqueNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdTypeFamailleNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.BDepot", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BDepots")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Depot__idGroup__0A688BB1");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("BDepots")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("FK__b_Depot__idPays__0B5CAFEA");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("BDepots")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__b_Depot__idUser__0C50D423");

                    b.HasOne("testdb.Models.BVille", "IdVilleNavigation")
                        .WithMany("BDepots")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__b_Depot__idVille__0D44F85C");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.BDepotSup", b =>
                {
                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany("BDepotSups")
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__b_DepotSu__idDep__0E391C95");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BDepotSups")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_DepotSu__idGro__0F2D40CE");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("BDepotSups")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__b_DepotSu__idUse__10216507");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.BModRglm", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BModRglms")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_ModRglm__idGro__11158940");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("BModRglms")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__b_ModRglm__idUse__1209AD79");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.BPay", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BPays")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Pays__idGroup__12FDD1B2");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.BPropriete", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BProprietes")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Proprie__idGro__13F1F5EB");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("BProprietes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__b_Proprie__idUse__14E61A24");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.BService", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BServices")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Service__idGro__15DA3E5D");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("BServices")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__b_Service__idUse__16CE6296");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.BSoldTresorerie", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("BSoldTresoreries")
                        .HasForeignKey("IdDossier")
                        .IsRequired()
                        .HasConstraintName("FK__b_SoldTre__idDos__17C286CF");

                    b.HasOne("testdb.Models.BTresorerie", "IdTresoNavigation")
                        .WithMany("BSoldTresoreries")
                        .HasForeignKey("IdTreso")
                        .IsRequired()
                        .HasConstraintName("FK__b_SoldTre__idTre__18B6AB08");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdTresoNavigation");
                });

            modelBuilder.Entity("testdb.Models.BTaxe", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BTaxes")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Taxe__idGroup__19AACF41");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.BTresorerie", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BTresoreries")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Tresore__idGro__1A9EF37A");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("BTresoreries")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__b_Tresore__idUse__1B9317B3");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.BVille", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("BVilles")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__b_Ville__idGroup__1C873BEC");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("BVilles")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("fk_b_ville_b_pays");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdPaysNavigation");
                });

            modelBuilder.Entity("testdb.Models.DDepartement", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("DDepartements")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK__d_Departe__idGro__1E6F845E");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("DDepartements")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__d_Departe__idUse__1F63A897");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.EArtDepot", b =>
                {
                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany()
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__e_Art_Dep__idDep__2057CCD0");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany()
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__e_Art_Dep__idDos__214BF109");

                    b.HasOne("testdb.Models.BDepotSup", "IdSupDepotNavigation")
                        .WithMany()
                        .HasForeignKey("IdSupDepot")
                        .HasConstraintName("FK__e_Art_Dep__idSup__22401542");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdSupDepotNavigation");
                });

            modelBuilder.Entity("testdb.Models.EEmail", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("EEmails")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__e_Emails__idGrou__2334397B");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("EEmails")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__e_Emails__idUser__24285DB4");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.EEntet", b =>
                {
                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK__e_Entet__idClien__251C81ED");

                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany("EEntetIdDepotNavigations")
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__e_Entet__idDepot__2610A626");

                    b.HasOne("testdb.Models.BDepot", "IdDepot2Navigation")
                        .WithMany("EEntetIdDepot2Navigations")
                        .HasForeignKey("IdDepot2")
                        .HasConstraintName("FK__e_Entet__idDepot__2704CA5F");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__e_Entet__idDossi__27F8EE98");

                    b.HasOne("testdb.Models.AFamille", "IdFamilleNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdFamille")
                        .HasConstraintName("FK_e_entet_a_famille");

                    b.HasOne("testdb.Models.TFournisseur", "IdFournisseurNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdFournisseur")
                        .HasConstraintName("FK__e_Entet__idFourn__28ED12D1");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__e_Entet__idGroup__29E1370A");

                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__e_Entet__idModRg__2AD55B43");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("EEntets")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__e_Entet__idUser__2BC97F7C");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdDepot2Navigation");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdFamilleNavigation");

                    b.Navigation("IdFournisseurNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdModRglmNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.EEntetLign", b =>
                {
                    b.HasOne("testdb.Models.AArticle", "IdArticleNavigation")
                        .WithMany("EEntetLigns")
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("FK__e_EntetLi__idArt__2DB1C7EE");

                    b.HasOne("testdb.Models.EEntet", "IdEntetNavigation")
                        .WithMany("EEntetLigns")
                        .HasForeignKey("IdEntet")
                        .HasConstraintName("FK__e_EntetLi__idEnt__2EA5EC27");

                    b.HasOne("testdb.Models.BDepotSup", "IdSupDepotNavigation")
                        .WithMany("EEntetLignIdSupDepotNavigations")
                        .HasForeignKey("IdSupDepot")
                        .HasConstraintName("FK__e_EntetLi__idSup__308E3499");

                    b.HasOne("testdb.Models.BDepotSup", "IdSupDepot2Navigation")
                        .WithMany("EEntetLignIdSupDepot2Navigations")
                        .HasForeignKey("IdSupDepot2")
                        .HasConstraintName("FK__e_EntetLi__idSup__2F9A1060");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("EEntetLigns")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__e_EntetLi__idUse__318258D2");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdEntetNavigation");

                    b.Navigation("IdSupDepot2Navigation");

                    b.Navigation("IdSupDepotNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.EFilleInEntet", b =>
                {
                    b.HasOne("testdb.Models.EEntet", "IdEntetNavigation")
                        .WithMany()
                        .HasForeignKey("IdEntet")
                        .HasConstraintName("FK__e_FilleIn__idEnt__345EC57D");

                    b.HasOne("testdb.Models.SFille", "IdFilleNavigation")
                        .WithMany()
                        .HasForeignKey("IdFille")
                        .HasConstraintName("FK__e_FilleIn__idFil__3552E9B6");

                    b.Navigation("IdEntetNavigation");

                    b.Navigation("IdFilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.ETypeDoc", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("ETypeDocs")
                        .HasForeignKey("IdDossier")
                        .IsRequired()
                        .HasConstraintName("FK__e_TypeDoc__idDos__36470DEF");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("testdb.Models.FFabrication", b =>
                {
                    b.HasOne("testdb.Models.AArticle", "IdArticleNavigation")
                        .WithMany("FFabrications")
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("FK__f_Fabrica__idArt__373B3228");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FFabrications")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__f_Fabrica__idGro__382F5661");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("FFabrications")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__f_Fabrica__idUse__39237A9A");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.FFabricationLign", b =>
                {
                    b.HasOne("testdb.Models.FFabrication", "IdFabricationNavigation")
                        .WithMany("FFabricationLigns")
                        .HasForeignKey("IdFabrication")
                        .HasConstraintName("FK__f_Fabrica__idFab__3A179ED3");

                    b.HasOne("testdb.Models.AArticle", "IdLignArticleNavigation")
                        .WithMany("FFabricationLigns")
                        .HasForeignKey("IdLignArticle")
                        .HasConstraintName("FK__f_Fabrica__idLig__3B0BC30C");

                    b.Navigation("IdFabricationNavigation");

                    b.Navigation("IdLignArticleNavigation");
                });

            modelBuilder.Entity("testdb.Models.FOrdre", b =>
                {
                    b.HasOne("testdb.Models.AArticle", "IdArticleNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("FK__f_Ordre__idArtic__3BFFE745");

                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__f_Ordre__idDepot__3CF40B7E");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__f_Ordre__idDossi__3DE82FB7");

                    b.HasOne("testdb.Models.FFabrication", "IdFabricationNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdFabrication")
                        .HasConstraintName("FK__f_Ordre__idFabri__3EDC53F0");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__f_Ordre__idGroup__3FD07829");

                    b.HasOne("testdb.Models.BDepotSup", "IdSupDepotNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdSupDepot")
                        .HasConstraintName("FK__f_Ordre__idSupDe__40C49C62");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("FOrdres")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__f_Ordre__idUser__41B8C09B");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdFabricationNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdSupDepotNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.FOrdreLine", b =>
                {
                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany("FOrdreLines")
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__f_OrdreLi__idDep__42ACE4D4");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("FOrdreLines")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__f_OrdreLi__idDos__43A1090D");

                    b.HasOne("testdb.Models.AArticle", "IdLignArticleNavigation")
                        .WithMany("FOrdreLines")
                        .HasForeignKey("IdLignArticle")
                        .HasConstraintName("FK__f_OrdreLi__idLig__44952D46");

                    b.HasOne("testdb.Models.FOrdre", "IdOrdreNavigation")
                        .WithMany("FOrdreLines")
                        .HasForeignKey("IdOrdre")
                        .HasConstraintName("FK__f_OrdreLi__idOrd__4589517F");

                    b.HasOne("testdb.Models.BDepotSup", "IdSupDepotNavigation")
                        .WithMany("FOrdreLines")
                        .HasForeignKey("IdSupDepot")
                        .HasConstraintName("FK__f_OrdreLi__idSup__467D75B8");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdLignArticleNavigation");

                    b.Navigation("IdOrdreNavigation");

                    b.Navigation("IdSupDepotNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishCharge", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FishCharges")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK_fish_charge_s_GroupUsers");

                    b.HasOne("testdb.Models.BService", "IdServiceNavigation")
                        .WithMany("FishCharges")
                        .HasForeignKey("IdService")
                        .HasConstraintName("FK_fish_charge_b_Service");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdServiceNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishEntet", b =>
                {
                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK_fish_entet_t_Client");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("fk_fish_entet_s_dossier");

                    b.HasOne("testdb.Models.AFamille", "IdFamilleNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdFamille")
                        .HasConstraintName("FK_fish_entet_a_Famille");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK_fish_entet_s_GroupUsers");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("fk_fish_entet_b_Pays");

                    b.HasOne("testdb.Models.FishPort", "IdPortNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdPort")
                        .HasConstraintName("fk_fish_entet_fish_port");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("FishEntets")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_fish_entet_s_User");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdFamilleNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdPortNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishEntetLign", b =>
                {
                    b.HasOne("testdb.Models.FishEntet", "IdEntetNavigation")
                        .WithMany("FishEntetLigns")
                        .HasForeignKey("IdEntet")
                        .HasConstraintName("FK_fish_entetLign_fish_entet");

                    b.HasOne("testdb.Models.AFamille", "IdFamilleNavigation")
                        .WithMany("FishEntetLigns")
                        .HasForeignKey("IdFamille")
                        .HasConstraintName("FK_fish_entetLign_a_famille");

                    b.Navigation("IdEntetNavigation");

                    b.Navigation("IdFamilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishFamille", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FishFamilles")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK_fish_famille_s_GroupUsers");

                    b.HasOne("testdb.Models.FishNomScientifique", "IdNomScientifiqueNavigation")
                        .WithMany("FishFamilles")
                        .HasForeignKey("IdNomScientifique")
                        .HasConstraintName("FK_fish_famille_fish_NomScientifique");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("FishFamilles")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("FK_fish_famille_b_pays");

                    b.HasOne("testdb.Models.FishTypeFamaille", "IdTypeFamailleNavigation")
                        .WithMany("FishFamilles")
                        .HasForeignKey("IdTypeFamaille")
                        .HasConstraintName("FK_fish_famille_fish_TypeFamaille");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("FishFamilles")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_fish_famille_s_Users");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdNomScientifiqueNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdTypeFamailleNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishNomScientifique", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FishNomScientifiques")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK_fish_NomScientifique_s_GroupUsers");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishPort", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FishPorts")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("fk_fish_port_s_GroupUsers");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("FishPorts")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_fish_port_s_user");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.FishTypeFamaille", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("FishTypeFamailles")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK_fish_TypeFamaille_s_GroupUsers");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingEntete", b =>
                {
                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany("HotelBBookingEntetes")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK__hotel_B_B__idCli__5A846E65");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("HotelBBookingEntetes")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__hotel_B_B__idDos__5B78929E");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("HotelBBookingEntetes")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__hotel_B_B__idGro__5C6CB6D7");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("HotelBBookingEntetes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__hotel_B_B__idUse__5D60DB10");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingExtra", b =>
                {
                    b.HasOne("testdb.Models.HotelBBookingEntete", "IdBookingEnteteNavigation")
                        .WithMany("HotelBBookingExtras")
                        .HasForeignKey("IdBookingEntete")
                        .HasConstraintName("FK__Hotel_B_B__idBoo__5E54FF49");

                    b.HasOne("testdb.Models.HotelSExtra", "IdExtrasNavigation")
                        .WithMany("HotelBBookingExtras")
                        .HasForeignKey("IdExtras")
                        .HasConstraintName("FK__Hotel_B_B__idExt__5F492382");

                    b.Navigation("IdBookingEnteteNavigation");

                    b.Navigation("IdExtrasNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingInvite", b =>
                {
                    b.HasOne("testdb.Models.HotelBBookingEntete", "IdBookingEnteteNavigation")
                        .WithMany("HotelBBookingInvites")
                        .HasForeignKey("IdBookingEntete")
                        .HasConstraintName("FK__Hotel_B_B__idBoo__603D47BB");

                    b.Navigation("IdBookingEnteteNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingLigne", b =>
                {
                    b.HasOne("testdb.Models.HotelBBookingEntete", "IdBookingEnteteNavigation")
                        .WithMany("HotelBBookingLignes")
                        .HasForeignKey("IdBookingEntete")
                        .HasConstraintName("FK__Hotel_B_B__idBoo__61316BF4");

                    b.HasOne("testdb.Models.HotelSRoomType", "IdRoomTypeNavigation")
                        .WithMany("HotelBBookingLignes")
                        .HasForeignKey("IdRoomType")
                        .HasConstraintName("FK__Hotel_B_B__idRoo__6225902D");

                    b.HasOne("testdb.Models.HotelSUnit", "IdUnitNavigation")
                        .WithMany("HotelBBookingLignes")
                        .HasForeignKey("IdUnit")
                        .HasConstraintName("FK__Hotel_B_B__idUni__6319B466");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("HotelBBookingLignes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Hotel_B_B__idUse__640DD89F");

                    b.Navigation("IdBookingEnteteNavigation");

                    b.Navigation("IdRoomTypeNavigation");

                    b.Navigation("IdUnitNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingPayment", b =>
                {
                    b.HasOne("testdb.Models.HotelBBookingEntete", "IdBookingEnteteNavigation")
                        .WithMany("HotelBBookingPayments")
                        .HasForeignKey("IdBookingEntete")
                        .HasConstraintName("FK__Hotel_B_B__idBoo__6501FCD8");

                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany("HotelBBookingPayments")
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__Hotel_B_B__idMod__65F62111");

                    b.Navigation("IdBookingEnteteNavigation");

                    b.Navigation("IdModRglmNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelBFilleInBookingEntete", b =>
                {
                    b.HasOne("testdb.Models.HotelBBookingEntete", "IdBookingEnteteNavigation")
                        .WithMany()
                        .HasForeignKey("IdBookingEntete")
                        .HasConstraintName("FK__hotel_B_F__idBoo__66EA454A");

                    b.HasOne("testdb.Models.SFille", "IdFilleNavigation")
                        .WithMany()
                        .HasForeignKey("IdFille")
                        .HasConstraintName("FK__hotel_B_F__idFil__67DE6983");

                    b.Navigation("IdBookingEnteteNavigation");

                    b.Navigation("IdFilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelSCategorie", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("HotelSCategories")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__hotel_S_C__idGro__68D28DBC");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("HotelSCategories")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__hotel_S_C__idUse__69C6B1F5");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelSEquipement", b =>
                {
                    b.HasOne("testdb.Models.HotelSRoomType", "IdRoomTypeNavigation")
                        .WithMany()
                        .HasForeignKey("IdRoomType")
                        .HasConstraintName("FK__hotel_S_E__idRoo__6ABAD62E");

                    b.Navigation("IdRoomTypeNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelSExtra", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("HotelSExtras")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__hotel_S_E__idGro__6BAEFA67");

                    b.HasOne("testdb.Models.BTaxe", "IdTaxeExtrasNavigation")
                        .WithMany("HotelSExtras")
                        .HasForeignKey("IdTaxeExtras")
                        .HasConstraintName("FK__hotel_S_E__idTax__6CA31EA0");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("HotelSExtras")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__hotel_S_E__idUse__6D9742D9");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdTaxeExtrasNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelSRoomType", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("HotelSRoomTypes")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__hotel_S_R__idGro__6E8B6712");

                    b.HasOne("testdb.Models.BTaxe", "IdTaxeLouerNavigation")
                        .WithMany("HotelSRoomTypes")
                        .HasForeignKey("IdTaxeLouer")
                        .HasConstraintName("FK__hotel_S_R__idTax__6F7F8B4B");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("HotelSRoomTypes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__hotel_S_R__idUse__7073AF84");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdTaxeLouerNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.HotelSUnit", b =>
                {
                    b.HasOne("testdb.Models.HotelSRoomType", "IdRoomTypeNavigation")
                        .WithMany("HotelSUnits")
                        .HasForeignKey("IdRoomType")
                        .HasConstraintName("FK__hotel_S_U__idRoo__7167D3BD");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("HotelSUnits")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__hotel_S_U__idUse__725BF7F6");

                    b.Navigation("IdRoomTypeNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.MaintAEquipement", b =>
                {
                    b.HasOne("testdb.Models.AArticle", "IdArticleNavigation")
                        .WithMany("MaintAEquipements")
                        .HasForeignKey("IdArticle")
                        .HasConstraintName("FK__Maint_A_E__idArt__73501C2F");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("MaintAEquipements")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Maint_A_E__idGro__74444068");

                    b.HasOne("testdb.Models.EEntetLign", "IdLignNavigation")
                        .WithMany("MaintAEquipements")
                        .HasForeignKey("IdLign")
                        .HasConstraintName("FK__Maint_A_E__idLig__753864A1");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("MaintAEquipements")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Maint_A_E__idUse__762C88DA");

                    b.Navigation("IdArticleNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdLignNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.MaintRRequest", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("MaintRRequests")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__Maint_R_R__idDos__7720AD13");

                    b.HasOne("testdb.Models.MaintAEquipement", "IdEquipementNavigation")
                        .WithMany("MaintRRequests")
                        .HasForeignKey("IdEquipement")
                        .HasConstraintName("FK__Maint_R_R__idEqu__7814D14C");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("MaintRRequests")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Maint_R_R__idGro__7908F585");

                    b.HasOne("testdb.Models.MaintSTeam", "IdTeamNavigation")
                        .WithMany("MaintRRequests")
                        .HasForeignKey("IdTeam")
                        .HasConstraintName("FK__Maint_R_R__idTea__79FD19BE");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("MaintRRequests")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Maint_R_R__idUse__7AF13DF7");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdEquipementNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdTeamNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.MaintSMember", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany()
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Maint_S_M__idEmp__7BE56230");

                    b.HasOne("testdb.Models.TFournisseur", "IdFournisseurNavigation")
                        .WithMany()
                        .HasForeignKey("IdFournisseur")
                        .HasConstraintName("FK__Maint_S_M__idFou__7CD98669");

                    b.HasOne("testdb.Models.MaintSTeam", "IdTeamNavigation")
                        .WithMany()
                        .HasForeignKey("IdTeam")
                        .HasConstraintName("FK__Maint_S_M__idTea__7DCDAAA2");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdFournisseurNavigation");

                    b.Navigation("IdTeamNavigation");
                });

            modelBuilder.Entity("testdb.Models.MaintSTeam", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("MaintSTeams")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Maint_S_T__idGro__7EC1CEDB");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("MaintSTeams")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Maint_S_T__idUse__7FB5F314");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PCaissier", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PCaissiers")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__p_Caissie__idGro__00AA174D");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PCaissiers")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__p_Caissie__idUse__019E3B86");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PFamille", b =>
                {
                    b.HasOne("testdb.Models.AFamille", "IdFamilleNavigation")
                        .WithMany()
                        .HasForeignKey("IdFamille")
                        .HasConstraintName("FK__p_Famille__idFam__02925FBF");

                    b.HasOne("testdb.Models.PPo", "IdPosNavigation")
                        .WithMany()
                        .HasForeignKey("IdPos")
                        .HasConstraintName("FK__p_Famille__idPos__038683F8");

                    b.Navigation("IdFamilleNavigation");

                    b.Navigation("IdPosNavigation");
                });

            modelBuilder.Entity("testdb.Models.PModRglm", b =>
                {
                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany()
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__p_ModRglm__idMod__047AA831");

                    b.HasOne("testdb.Models.PPo", "IdPosNavigation")
                        .WithMany()
                        .HasForeignKey("IdPos")
                        .HasConstraintName("FK__p_ModRglm__idPos__056ECC6A");

                    b.Navigation("IdModRglmNavigation");

                    b.Navigation("IdPosNavigation");
                });

            modelBuilder.Entity("testdb.Models.PPo", b =>
                {
                    b.HasOne("testdb.Models.TClient", "ClientDiversNavigation")
                        .WithMany("PPos")
                        .HasForeignKey("ClientDivers")
                        .HasConstraintName("FK__p_Pos__clientDiv__0662F0A3");

                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany("PPos")
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__p_Pos__idDepot__075714DC");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("PPos")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__p_Pos__idDossier__084B3915");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PPos")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__p_Pos__idGroup__093F5D4E");

                    b.HasOne("testdb.Models.BTresorerie", "IdTresoNavigation")
                        .WithMany("PPos")
                        .HasForeignKey("IdTreso")
                        .HasConstraintName("FK__p_Pos__idTreso__0A338187");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PPos")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__p_Pos__idUser__0B27A5C0");

                    b.Navigation("ClientDiversNavigation");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdTresoNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PSession", b =>
                {
                    b.HasOne("testdb.Models.PCaissier", "CaissierCloseNavigation")
                        .WithMany("PSessionCaissierCloseNavigations")
                        .HasForeignKey("CaissierClose")
                        .HasConstraintName("FK__p_Session__caiss__0D0FEE32");

                    b.HasOne("testdb.Models.PCaissier", "CaissierOpenNavigation")
                        .WithMany("PSessionCaissierOpenNavigations")
                        .HasForeignKey("CaissierOpen")
                        .HasConstraintName("FK__p_Session__caiss__0C1BC9F9");

                    b.HasOne("testdb.Models.PPo", "IdPosNavigation")
                        .WithMany("PSessions")
                        .HasForeignKey("IdPos")
                        .HasConstraintName("FK__p_Session__idPos__0E04126B");

                    b.Navigation("CaissierCloseNavigation");

                    b.Navigation("CaissierOpenNavigation");

                    b.Navigation("IdPosNavigation");
                });

            modelBuilder.Entity("testdb.Models.PTicket", b =>
                {
                    b.HasOne("testdb.Models.PCaissier", "IdCaissierNavigation")
                        .WithMany("PTickets")
                        .HasForeignKey("IdCaissier")
                        .HasConstraintName("FK__p_Ticket__idCais__0EF836A4");

                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany("PTickets")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK__p_Ticket__idClie__0FEC5ADD");

                    b.HasOne("testdb.Models.PSession", "IdSessionNavigation")
                        .WithMany("PTickets")
                        .HasForeignKey("IdSession")
                        .HasConstraintName("FK__p_Ticket__idSess__10E07F16");

                    b.Navigation("IdCaissierNavigation");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdSessionNavigation");
                });

            modelBuilder.Entity("testdb.Models.PTicketLigne", b =>
                {
                    b.HasOne("testdb.Models.PTicket", "IdTicketNavigation")
                        .WithMany("PTicketLignes")
                        .HasForeignKey("IdTicket")
                        .HasConstraintName("FK__p_Ticket___idTic__12C8C788");

                    b.HasOne("testdb.Models.AArticle", "IdproductNavigation")
                        .WithMany("PTicketLignes")
                        .HasForeignKey("Idproduct")
                        .HasConstraintName("FK__p_Ticket___idpro__11D4A34F");

                    b.Navigation("IdTicketNavigation");

                    b.Navigation("IdproductNavigation");
                });

            modelBuilder.Entity("testdb.Models.PTicketReg", b =>
                {
                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany("PTicketRegs")
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__p_Ticket___idMod__13BCEBC1");

                    b.HasOne("testdb.Models.PTicket", "IdTicketNavigation")
                        .WithMany("PTicketRegs")
                        .HasForeignKey("IdTicket")
                        .HasConstraintName("FK__p_Ticket___idTic__14B10FFA");

                    b.Navigation("IdModRglmNavigation");

                    b.Navigation("IdTicketNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCCotisation", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieCCotisations")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_C_Co__idEmp__15A53433");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCCotisations")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_C_Co__idGro__1699586C");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCCotisations")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_C_Co__idUse__178D7CA5");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCRubrique", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCRubriques")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_C_Ru__idGro__1881A0DE");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCRubriques")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_C_Ru__idUse__1975C517");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCVariable", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCVariables")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_C_Va__idGro__1A69E950");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCVariables")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_C_Va__idUse__1B5E0D89");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculAvance", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieCalculAvances")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_Calc__idEmp__1C5231C2");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCalculAvances")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Calc__idGro__1D4655FB");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCalculAvances")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Calc__idUse__1E3A7A34");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculBulletin", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("PaieCalculBulletins")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("fk_Paie_Calcul_bulletin_dossier");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCalculBulletins")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("fk_Paie_Calcul_bulletin_groupUser");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCalculBulletins")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_Paie_Calcul_bulletin_user");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculBulletinLigne", b =>
                {
                    b.HasOne("testdb.Models.PaieCalculBulletin", "IdBulletinNavigation")
                        .WithMany("PaieCalculBulletinLignes")
                        .HasForeignKey("IdBulletin")
                        .HasConstraintName("fk_Paie_Calcul_bulletin_ligne_bulletin");

                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieCalculBulletinLignes")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("fk_Paie_Calcul_bulletin_ligne_Employee");

                    b.Navigation("IdBulletinNavigation");

                    b.Navigation("IdEmployeNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculConge", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("PaieCalculConges")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__Paie_Calc__idDos__23F3538A");

                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieCalculConges")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_Calc__idEmp__24E777C3");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCalculConges")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Calc__idGro__25DB9BFC");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCalculConges")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Calc__idUse__26CFC035");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculEntete", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieCalculEntetes")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_Calc__idEmp__27C3E46E");

                    b.HasOne("testdb.Models.PaieCalculGrpEntete", "IdGrpEntNavigation")
                        .WithMany("PaieCalculEntetes")
                        .HasForeignKey("IdGrpEnt")
                        .HasConstraintName("FK__Paie_Calc__idGrp__28B808A7");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGrpEntNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculGrpEntete", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("PaieCalculGrpEntetes")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__Paie_Calc__idDos__29AC2CE0");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieCalculGrpEntetes")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Calc__idGro__2AA05119");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieCalculGrpEntetes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Calc__idUse__2B947552");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculLigneRubrique", b =>
                {
                    b.HasOne("testdb.Models.PaieCalculEntete", "IdEnteteNavigation")
                        .WithMany("PaieCalculLigneRubriques")
                        .HasForeignKey("IdEntete")
                        .HasConstraintName("FK__Paie_Calc__idEnt__2C88998B");

                    b.Navigation("IdEnteteNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieEConge", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("PaieEConges")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__Paie_E_Co__idDos__2D7CBDC4");

                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieEConges")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_E_Co__idEmp__2E70E1FD");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieEConges")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_E_Co__idGro__2F650636");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieEConges")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_E_Co__idUse__30592A6F");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieEContrat", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieEContrats")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_E_Co__idEmp__314D4EA8");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieEContrats")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_E_Co__idGro__324172E1");

                    b.HasOne("testdb.Models.PaieIProfilContrat", "IdProfilNavigation")
                        .WithMany("PaieEContrats")
                        .HasForeignKey("IdProfil")
                        .HasConstraintName("FK__Paie_E_Co__idPro__3335971A");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieEContrats")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_E_Co__idUse__3429BB53");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdProfilNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieEEmploye", b =>
                {
                    b.HasOne("testdb.Models.PaieICategorie", "IdCategorieNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdCategorie")
                        .HasConstraintName("FK__Paie_E_Em__idCat__351DDF8C");

                    b.HasOne("testdb.Models.PaieIDepartement", "IdDepartementNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdDepartement")
                        .HasConstraintName("FK__Paie_E_Em__idDep__361203C5");

                    b.HasOne("testdb.Models.PaieIFonction", "IdFonctionNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdFonction")
                        .HasConstraintName("FK__Paie_E_Em__idFon__370627FE");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdGroup")
                        .IsRequired()
                        .HasConstraintName("FK__Paie_E_Em__idGro__37FA4C37");

                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__Paie_E_Em__idMod__38EE7070");

                    b.HasOne("testdb.Models.PaieINiveau", "IdNiveauNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdNiveau")
                        .HasConstraintName("FK__Paie_E_Em__idNiv__39E294A9");

                    b.HasOne("testdb.Models.PaieZPlanning", "IdPlanningNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdPlanning")
                        .HasConstraintName("FK__Paie_E_Em__idPla__3AD6B8E2");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_E_Em__idUse__3BCADD1B");

                    b.HasOne("testdb.Models.PaieZUserDevice", "IdUserDeviceNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdUserDevice")
                        .HasConstraintName("FK__Paie_E_Em__idUse__3CBF0154");

                    b.HasOne("testdb.Models.BVille", "IdVilleNavigation")
                        .WithMany("PaieEEmployes")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__Paie_E_Em__idVil__3DB3258D");

                    b.Navigation("IdCategorieNavigation");

                    b.Navigation("IdDepartementNavigation");

                    b.Navigation("IdFonctionNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdModRglmNavigation");

                    b.Navigation("IdNiveauNavigation");

                    b.Navigation("IdPlanningNavigation");

                    b.Navigation("IdUserDeviceNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieEPret", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieEPrets")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_E_Pr__idEmp__408F9238");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieEPrets")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_E_Pr__idGro__4183B671");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieEPrets")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_E_Pr__idUse__4277DAAA");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieICategorie", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieICategories")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__paie_I_Ca__idGro__436BFEE3");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieICategories")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__paie_I_Ca__idUse__4460231C");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieIDepartement", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieIDepartements")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__paie_I_De__idGro__45544755");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieIDepartements")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__paie_I_De__idUse__46486B8E");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieIFonction", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieIFonctions")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__paie_I_Fo__idGro__473C8FC7");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieIFonctions")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__paie_I_Fo__idUse__4830B400");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieINiveau", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieINiveaus")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__paie_I_Ni__idGro__4924D839");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieINiveaus")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__paie_I_Ni__idUse__4A18FC72");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieIProfilContrat", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieIProfilContrats")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__paie_I_Pr__idGro__4B0D20AB");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieIProfilContrats")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__paie_I_Pr__idUse__4C0144E4");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieITauxFraisProf", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieITauxFraisProfs")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__paie_I_Ta__idGro__4CF5691D");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieITauxFraisProfs")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__paie_I_Ta__idUse__4DE98D56");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaiePPointage", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("PaiePPointages")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("fk_pointage_dossier");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaiePPointages")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("fk_Paie_P_POINTAGE_idGroup");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaiePPointages")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("fk_Paie_P_POINTAGE_idUser");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaiePPointageLigne", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaiePPointageLignes")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("fk_Paie_P_POINTAGE_LIGNE_idEmploye");

                    b.HasOne("testdb.Models.PaiePPointage", "IdPointageNavigation")
                        .WithMany("PaiePPointageLignes")
                        .HasForeignKey("IdPointage")
                        .HasConstraintName("fk_Paie_P_POINTAGE_LIGNE_idPointage");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdPointageNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieZLogDatum", b =>
                {
                    b.HasOne("testdb.Models.PaieEEmploye", "IdEmployeNavigation")
                        .WithMany("PaieZLogData")
                        .HasForeignKey("IdEmploye")
                        .HasConstraintName("FK__Paie_Z_Lo__idEmp__53A266AC");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieZLogData")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Z_Lo__idGro__54968AE5");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieZLogData")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Z_Lo__idUse__567ED357");

                    b.HasOne("testdb.Models.PaieZUserDevice", "IdUserDeviceNavigation")
                        .WithMany("PaieZLogData")
                        .HasForeignKey("IdUserDevice")
                        .HasConstraintName("FK__Paie_Z_Lo__idUse__558AAF1E");

                    b.Navigation("IdEmployeNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserDeviceNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieZPlanning", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieZPlannings")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Z_Pl__idGro__5772F790");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieZPlannings")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Z_Pl__idUse__58671BC9");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieZUserDevice", b =>
                {
                    b.HasOne("testdb.Models.PaieZZktdevice", "IdDeviceNavigation")
                        .WithMany("PaieZUserDevices")
                        .HasForeignKey("IdDevice")
                        .HasConstraintName("FK__Paie_Z_Us__idDev__595B4002");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieZUserDevices")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Z_Us__idGro__5A4F643B");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieZUserDevices")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Z_Us__idUse__5B438874");

                    b.Navigation("IdDeviceNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.PaieZZktdevice", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("PaieZZktdevices")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__Paie_Z_ZK__idGro__5C37ACAD");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("PaieZZktdevices")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__Paie_Z_ZK__idUse__5D2BD0E6");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.RReglement", b =>
                {
                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK__r_Regleme__idCli__5E1FF51F");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__r_Regleme__idDos__5F141958");

                    b.HasOne("testdb.Models.EEntet", "IdEntetNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdEntet")
                        .HasConstraintName("FK__r_Regleme__idEnt__60083D91");

                    b.HasOne("testdb.Models.FishEntet", "IdEntetFishNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdEntetFish")
                        .HasConstraintName("fk_reglement_fish_entet");

                    b.HasOne("testdb.Models.TFournisseur", "IdFournisseurNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdFournisseur")
                        .HasConstraintName("FK__r_Regleme__idFou__60FC61CA");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__r_Regleme__idGro__61F08603");

                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__r_Regleme__idMod__62E4AA3C");

                    b.HasOne("testdb.Models.BTresorerie", "IdTresoNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdTreso")
                        .HasConstraintName("FK__r_Regleme__idTre__63D8CE75");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("RReglements")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__r_Regleme__idUse__64CCF2AE");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdEntetFishNavigation");

                    b.Navigation("IdEntetNavigation");

                    b.Navigation("IdFournisseurNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdModRglmNavigation");

                    b.Navigation("IdTresoNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.RReglementInFille", b =>
                {
                    b.HasOne("testdb.Models.SFille", "IdFilleNavigation")
                        .WithMany()
                        .HasForeignKey("IdFille")
                        .HasConstraintName("FK__r_Regleme__idFil__66B53B20");

                    b.HasOne("testdb.Models.RReglement", "IdReglementNavigation")
                        .WithMany()
                        .HasForeignKey("IdReglement")
                        .HasConstraintName("FK__r_Regleme__idReg__67A95F59");

                    b.Navigation("IdFilleNavigation");

                    b.Navigation("IdReglementNavigation");
                });

            modelBuilder.Entity("testdb.Models.SDossier", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SDossiers")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_Dossier__idGro__689D8392");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.SEmailsSetting", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SEmailsSettings")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_EmailsS__idGro__6991A7CB");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("SEmailsSettings")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__s_EmailsS__idUse__6A85CC04");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.SFille", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SFilles")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_Fille__idGroup__6B79F03D");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("SFilles")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__s_Fille__idUser__6C6E1476");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.SLiaisonUser", b =>
                {
                    b.HasOne("testdb.Models.BDepot", "IdDepotNavigation")
                        .WithMany()
                        .HasForeignKey("IdDepot")
                        .HasConstraintName("FK__s_Liaison__idDep__6D6238AF");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany()
                        .HasForeignKey("IdPays")
                        .HasConstraintName("FK__s_Liaison__idPay__6E565CE8");

                    b.HasOne("testdb.Models.BTresorerie", "IdTresoNavigation")
                        .WithMany()
                        .HasForeignKey("IdTreso")
                        .HasConstraintName("FK__s_Liaison__idTre__6F4A8121");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__s_Liaison__idUse__703EA55A");

                    b.HasOne("testdb.Models.BVille", "IdVilleNavigation")
                        .WithMany()
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__s_Liaison__idVil__7132C993");

                    b.Navigation("IdDepotNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdTresoNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.SMenuInstall", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany()
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_MenuIns__idGro__7226EDCC");

                    b.HasOne("testdb.Models.SMenu", "IdMenuNavigation")
                        .WithMany()
                        .HasForeignKey("IdMenu")
                        .HasConstraintName("FK__s_MenuIns__idMen__731B1205");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__s_MenuIns__idUse__740F363E");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdMenuNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.SMenuSubInstall", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany()
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_MenuSub__idGro__75035A77");

                    b.HasOne("testdb.Models.SMenuSub", "IdSubMenuNavigation")
                        .WithMany()
                        .HasForeignKey("IdSubMenu")
                        .HasConstraintName("FK__s_MenuSub__idSub__75F77EB0");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__s_MenuSub__idUse__76EBA2E9");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdSubMenuNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.SRole", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SRoles")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_Roles__idGroup__77DFC722");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.SSetting", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SSettings")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_Setting__idGro__78D3EB5B");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.SUser", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SUsers")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__s_Users__idGroup__7D98A078");

                    b.Navigation("IdGroupNavigation");
                });

            modelBuilder.Entity("testdb.Models.SbCreationBarCode", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("SbCreationBarCodes")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__sb_Creati__idDos__7E8CC4B1");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("SbCreationBarCodes")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__sb_Creati__idGro__7F80E8EA");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("SbCreationBarCodes")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__sb_Creati__idUse__00750D23");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.ScCalendar", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("ScCalendars")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__sc_calend__idGro__0169315C");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("ScCalendars")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__sc_calend__idUse__025D5595");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.ScSchedule", b =>
                {
                    b.HasOne("testdb.Models.ScCalendar", "IdCalendarNavigation")
                        .WithMany("ScSchedules")
                        .HasForeignKey("IdCalendar")
                        .HasConstraintName("FK__sc_schedu__idCal__035179CE");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("ScSchedules")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__sc_schedu__idGro__04459E07");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("ScSchedules")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__sc_schedu__idUse__0539C240");

                    b.Navigation("IdCalendarNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.TClient", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("TClients")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__t_Client__idGrou__062DE679");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("TClients")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("FK__t_Client__idPays__08162EEB");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("TClients")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__t_Client__idUser__09FE775D");

                    b.HasOne("testdb.Models.BVille", "IdVilleNavigation")
                        .WithMany("TClients")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__t_Client__idVill__0BE6BFCF");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.TClientCredit", b =>
                {
                    b.HasOne("testdb.Models.TClient", "IdClientNavigation")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK__t_ClientC__idCli__0DCF0841");

                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany()
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__t_ClientC__idDos__0EC32C7A");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdDossierNavigation");
                });

            modelBuilder.Entity("testdb.Models.TFournisseur", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("TFournisseurs")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__t_Fournis__idGro__0FB750B3");

                    b.HasOne("testdb.Models.BPay", "IdPaysNavigation")
                        .WithMany("TFournisseurs")
                        .HasForeignKey("IdPays")
                        .HasConstraintName("FK__t_Fournis__idPay__10AB74EC");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("TFournisseurs")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__t_Fournis__idUse__119F9925");

                    b.HasOne("testdb.Models.BVille", "IdVilleNavigation")
                        .WithMany("TFournisseurs")
                        .HasForeignKey("IdVille")
                        .HasConstraintName("FK__t_Fournis__idVil__1293BD5E");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdPaysNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("IdVilleNavigation");
                });

            modelBuilder.Entity("testdb.Models.TFournisseurCredit", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany()
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__t_Fournis__idDos__1387E197");

                    b.HasOne("testdb.Models.TFournisseur", "IdFournisseurNavigation")
                        .WithMany()
                        .HasForeignKey("IdFournisseur")
                        .HasConstraintName("FK__t_Fournis__idFou__147C05D0");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdFournisseurNavigation");
                });

            modelBuilder.Entity("testdb.Models.TrTresorerieEntet", b =>
                {
                    b.HasOne("testdb.Models.SDossier", "IdDossierNavigation")
                        .WithMany("TrTresorerieEntets")
                        .HasForeignKey("IdDossier")
                        .HasConstraintName("FK__tr_Tresor__idDos__15702A09");

                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("TrTresorerieEntets")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__tr_Tresor__idGro__16644E42");

                    b.HasOne("testdb.Models.BModRglm", "IdModRglmNavigation")
                        .WithMany("TrTresorerieEntets")
                        .HasForeignKey("IdModRglm")
                        .HasConstraintName("FK__tr_Tresor__idMod__1758727B");

                    b.HasOne("testdb.Models.BService", "IdServiceNavigation")
                        .WithMany("TrTresorerieEntets")
                        .HasForeignKey("IdService")
                        .HasConstraintName("FK__tr_Tresor__idSer__184C96B4");

                    b.HasOne("testdb.Models.BTresorerie", "IdTresoNavigation")
                        .WithMany("TrTresorerieEntetIdTresoNavigations")
                        .HasForeignKey("IdTreso")
                        .HasConstraintName("FK__tr_Tresor__idTre__1940BAED");

                    b.HasOne("testdb.Models.BTresorerie", "IdTreso2Navigation")
                        .WithMany("TrTresorerieEntetIdTreso2Navigations")
                        .HasForeignKey("IdTreso2")
                        .HasConstraintName("FK__tr_Tresor__idTre__1A34DF26");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("TrTresorerieEntets")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__tr_Tresor__idUse__1B29035F");

                    b.Navigation("IdDossierNavigation");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdModRglmNavigation");

                    b.Navigation("IdServiceNavigation");

                    b.Navigation("IdTreso2Navigation");

                    b.Navigation("IdTresoNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.UUniteMesure", b =>
                {
                    b.HasOne("testdb.Models.SGroupUser", "IdGroupNavigation")
                        .WithMany("UUniteMesures")
                        .HasForeignKey("IdGroup")
                        .HasConstraintName("FK__u_UniteMe__idGro__1C1D2798");

                    b.HasOne("testdb.Models.SUser", "IdUserNavigation")
                        .WithMany("UUniteMesures")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK__u_UniteMe__idUse__1D114BD1");

                    b.Navigation("IdGroupNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("ERP_Anass_backend.Models.Familly", b =>
                {
                    b.Navigation("Article");
                });

            modelBuilder.Entity("testdb.Models.AArticle", b =>
                {
                    b.Navigation("ABateaus");

                    b.Navigation("EEntetLigns");

                    b.Navigation("FFabricationLigns");

                    b.Navigation("FFabrications");

                    b.Navigation("FOrdreLines");

                    b.Navigation("FOrdres");

                    b.Navigation("MaintAEquipements");

                    b.Navigation("PTicketLignes");
                });

            modelBuilder.Entity("testdb.Models.AFamille", b =>
                {
                    b.Navigation("AArticles");

                    b.Navigation("EEntets");

                    b.Navigation("FishEntetLigns");

                    b.Navigation("FishEntets");
                });

            modelBuilder.Entity("testdb.Models.BDepot", b =>
                {
                    b.Navigation("BDepotSups");

                    b.Navigation("EEntetIdDepot2Navigations");

                    b.Navigation("EEntetIdDepotNavigations");

                    b.Navigation("FOrdreLines");

                    b.Navigation("FOrdres");

                    b.Navigation("PPos");
                });

            modelBuilder.Entity("testdb.Models.BDepotSup", b =>
                {
                    b.Navigation("EEntetLignIdSupDepot2Navigations");

                    b.Navigation("EEntetLignIdSupDepotNavigations");

                    b.Navigation("FOrdreLines");

                    b.Navigation("FOrdres");
                });

            modelBuilder.Entity("testdb.Models.BModRglm", b =>
                {
                    b.Navigation("EEntets");

                    b.Navigation("HotelBBookingPayments");

                    b.Navigation("PTicketRegs");

                    b.Navigation("PaieEEmployes");

                    b.Navigation("RReglements");

                    b.Navigation("TrTresorerieEntets");
                });

            modelBuilder.Entity("testdb.Models.BPay", b =>
                {
                    b.Navigation("AFamilles");

                    b.Navigation("BDepots");

                    b.Navigation("BVilles");

                    b.Navigation("FishEntets");

                    b.Navigation("FishFamilles");

                    b.Navigation("TClients");

                    b.Navigation("TFournisseurs");
                });

            modelBuilder.Entity("testdb.Models.BService", b =>
                {
                    b.Navigation("FishCharges");

                    b.Navigation("TrTresorerieEntets");
                });

            modelBuilder.Entity("testdb.Models.BTaxe", b =>
                {
                    b.Navigation("AArticleIdTaxeAchatNavigations");

                    b.Navigation("AArticleIdTaxeVenteNavigations");

                    b.Navigation("HotelSExtras");

                    b.Navigation("HotelSRoomTypes");
                });

            modelBuilder.Entity("testdb.Models.BTresorerie", b =>
                {
                    b.Navigation("BSoldTresoreries");

                    b.Navigation("PPos");

                    b.Navigation("RReglements");

                    b.Navigation("TrTresorerieEntetIdTreso2Navigations");

                    b.Navigation("TrTresorerieEntetIdTresoNavigations");
                });

            modelBuilder.Entity("testdb.Models.BVille", b =>
                {
                    b.Navigation("BDepots");

                    b.Navigation("PaieEEmployes");

                    b.Navigation("TClients");

                    b.Navigation("TFournisseurs");
                });

            modelBuilder.Entity("testdb.Models.EEntet", b =>
                {
                    b.Navigation("EEntetLigns");

                    b.Navigation("RReglements");
                });

            modelBuilder.Entity("testdb.Models.EEntetLign", b =>
                {
                    b.Navigation("MaintAEquipements");
                });

            modelBuilder.Entity("testdb.Models.FFabrication", b =>
                {
                    b.Navigation("FFabricationLigns");

                    b.Navigation("FOrdres");
                });

            modelBuilder.Entity("testdb.Models.FOrdre", b =>
                {
                    b.Navigation("FOrdreLines");
                });

            modelBuilder.Entity("testdb.Models.FishEntet", b =>
                {
                    b.Navigation("FishEntetLigns");

                    b.Navigation("RReglements");
                });

            modelBuilder.Entity("testdb.Models.FishNomScientifique", b =>
                {
                    b.Navigation("AFamilles");

                    b.Navigation("FishFamilles");
                });

            modelBuilder.Entity("testdb.Models.FishPort", b =>
                {
                    b.Navigation("FishEntets");
                });

            modelBuilder.Entity("testdb.Models.FishTypeFamaille", b =>
                {
                    b.Navigation("AFamilles");

                    b.Navigation("FishFamilles");
                });

            modelBuilder.Entity("testdb.Models.HotelBBookingEntete", b =>
                {
                    b.Navigation("HotelBBookingExtras");

                    b.Navigation("HotelBBookingInvites");

                    b.Navigation("HotelBBookingLignes");

                    b.Navigation("HotelBBookingPayments");
                });

            modelBuilder.Entity("testdb.Models.HotelSExtra", b =>
                {
                    b.Navigation("HotelBBookingExtras");
                });

            modelBuilder.Entity("testdb.Models.HotelSRoomType", b =>
                {
                    b.Navigation("HotelBBookingLignes");

                    b.Navigation("HotelSUnits");
                });

            modelBuilder.Entity("testdb.Models.HotelSUnit", b =>
                {
                    b.Navigation("HotelBBookingLignes");
                });

            modelBuilder.Entity("testdb.Models.MaintAEquipement", b =>
                {
                    b.Navigation("MaintRRequests");
                });

            modelBuilder.Entity("testdb.Models.MaintSTeam", b =>
                {
                    b.Navigation("MaintRRequests");
                });

            modelBuilder.Entity("testdb.Models.PCaissier", b =>
                {
                    b.Navigation("PSessionCaissierCloseNavigations");

                    b.Navigation("PSessionCaissierOpenNavigations");

                    b.Navigation("PTickets");
                });

            modelBuilder.Entity("testdb.Models.PPo", b =>
                {
                    b.Navigation("PSessions");
                });

            modelBuilder.Entity("testdb.Models.PSession", b =>
                {
                    b.Navigation("PTickets");
                });

            modelBuilder.Entity("testdb.Models.PTicket", b =>
                {
                    b.Navigation("PTicketLignes");

                    b.Navigation("PTicketRegs");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculBulletin", b =>
                {
                    b.Navigation("PaieCalculBulletinLignes");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculEntete", b =>
                {
                    b.Navigation("PaieCalculLigneRubriques");
                });

            modelBuilder.Entity("testdb.Models.PaieCalculGrpEntete", b =>
                {
                    b.Navigation("PaieCalculEntetes");
                });

            modelBuilder.Entity("testdb.Models.PaieEEmploye", b =>
                {
                    b.Navigation("PaieCCotisations");

                    b.Navigation("PaieCalculAvances");

                    b.Navigation("PaieCalculBulletinLignes");

                    b.Navigation("PaieCalculConges");

                    b.Navigation("PaieCalculEntetes");

                    b.Navigation("PaieEConges");

                    b.Navigation("PaieEContrats");

                    b.Navigation("PaieEPrets");

                    b.Navigation("PaiePPointageLignes");

                    b.Navigation("PaieZLogData");
                });

            modelBuilder.Entity("testdb.Models.PaieICategorie", b =>
                {
                    b.Navigation("PaieEEmployes");
                });

            modelBuilder.Entity("testdb.Models.PaieIDepartement", b =>
                {
                    b.Navigation("PaieEEmployes");
                });

            modelBuilder.Entity("testdb.Models.PaieIFonction", b =>
                {
                    b.Navigation("PaieEEmployes");
                });

            modelBuilder.Entity("testdb.Models.PaieINiveau", b =>
                {
                    b.Navigation("PaieEEmployes");
                });

            modelBuilder.Entity("testdb.Models.PaieIProfilContrat", b =>
                {
                    b.Navigation("PaieEContrats");
                });

            modelBuilder.Entity("testdb.Models.PaiePPointage", b =>
                {
                    b.Navigation("PaiePPointageLignes");
                });

            modelBuilder.Entity("testdb.Models.PaieZPlanning", b =>
                {
                    b.Navigation("PaieEEmployes");
                });

            modelBuilder.Entity("testdb.Models.PaieZUserDevice", b =>
                {
                    b.Navigation("PaieEEmployes");

                    b.Navigation("PaieZLogData");
                });

            modelBuilder.Entity("testdb.Models.PaieZZktdevice", b =>
                {
                    b.Navigation("PaieZUserDevices");
                });

            modelBuilder.Entity("testdb.Models.SDossier", b =>
                {
                    b.Navigation("BSoldTresoreries");

                    b.Navigation("EEntets");

                    b.Navigation("ETypeDocs");

                    b.Navigation("FOrdreLines");

                    b.Navigation("FOrdres");

                    b.Navigation("FishEntets");

                    b.Navigation("HotelBBookingEntetes");

                    b.Navigation("MaintRRequests");

                    b.Navigation("PPos");

                    b.Navigation("PaieCalculBulletins");

                    b.Navigation("PaieCalculConges");

                    b.Navigation("PaieCalculGrpEntetes");

                    b.Navigation("PaieEConges");

                    b.Navigation("PaiePPointages");

                    b.Navigation("RReglements");

                    b.Navigation("SbCreationBarCodes");

                    b.Navigation("TrTresorerieEntets");
                });

            modelBuilder.Entity("testdb.Models.SGroupUser", b =>
                {
                    b.Navigation("AArticles");

                    b.Navigation("AFamilles");

                    b.Navigation("BDepotSups");

                    b.Navigation("BDepots");

                    b.Navigation("BModRglms");

                    b.Navigation("BPays");

                    b.Navigation("BProprietes");

                    b.Navigation("BServices");

                    b.Navigation("BTaxes");

                    b.Navigation("BTresoreries");

                    b.Navigation("BVilles");

                    b.Navigation("DDepartements");

                    b.Navigation("EEmails");

                    b.Navigation("EEntets");

                    b.Navigation("FFabrications");

                    b.Navigation("FOrdres");

                    b.Navigation("FishCharges");

                    b.Navigation("FishEntets");

                    b.Navigation("FishFamilles");

                    b.Navigation("FishNomScientifiques");

                    b.Navigation("FishPorts");

                    b.Navigation("FishTypeFamailles");

                    b.Navigation("HotelBBookingEntetes");

                    b.Navigation("HotelSCategories");

                    b.Navigation("HotelSExtras");

                    b.Navigation("HotelSRoomTypes");

                    b.Navigation("MaintAEquipements");

                    b.Navigation("MaintRRequests");

                    b.Navigation("MaintSTeams");

                    b.Navigation("PCaissiers");

                    b.Navigation("PPos");

                    b.Navigation("PaieCCotisations");

                    b.Navigation("PaieCRubriques");

                    b.Navigation("PaieCVariables");

                    b.Navigation("PaieCalculAvances");

                    b.Navigation("PaieCalculBulletins");

                    b.Navigation("PaieCalculConges");

                    b.Navigation("PaieCalculGrpEntetes");

                    b.Navigation("PaieEConges");

                    b.Navigation("PaieEContrats");

                    b.Navigation("PaieEEmployes");

                    b.Navigation("PaieEPrets");

                    b.Navigation("PaieICategories");

                    b.Navigation("PaieIDepartements");

                    b.Navigation("PaieIFonctions");

                    b.Navigation("PaieINiveaus");

                    b.Navigation("PaieIProfilContrats");

                    b.Navigation("PaieITauxFraisProfs");

                    b.Navigation("PaiePPointages");

                    b.Navigation("PaieZLogData");

                    b.Navigation("PaieZPlannings");

                    b.Navigation("PaieZUserDevices");

                    b.Navigation("PaieZZktdevices");

                    b.Navigation("RReglements");

                    b.Navigation("SDossiers");

                    b.Navigation("SEmailsSettings");

                    b.Navigation("SFilles");

                    b.Navigation("SRoles");

                    b.Navigation("SSettings");

                    b.Navigation("SUsers");

                    b.Navigation("SbCreationBarCodes");

                    b.Navigation("ScCalendars");

                    b.Navigation("ScSchedules");

                    b.Navigation("TClients");

                    b.Navigation("TFournisseurs");

                    b.Navigation("TrTresorerieEntets");

                    b.Navigation("UUniteMesures");
                });

            modelBuilder.Entity("testdb.Models.SUser", b =>
                {
                    b.Navigation("AArticles");

                    b.Navigation("AFamilles");

                    b.Navigation("BDepotSups");

                    b.Navigation("BDepots");

                    b.Navigation("BModRglms");

                    b.Navigation("BProprietes");

                    b.Navigation("BServices");

                    b.Navigation("BTresoreries");

                    b.Navigation("DDepartements");

                    b.Navigation("EEmails");

                    b.Navigation("EEntetLigns");

                    b.Navigation("EEntets");

                    b.Navigation("FFabrications");

                    b.Navigation("FOrdres");

                    b.Navigation("FishEntets");

                    b.Navigation("FishFamilles");

                    b.Navigation("FishPorts");

                    b.Navigation("HotelBBookingEntetes");

                    b.Navigation("HotelBBookingLignes");

                    b.Navigation("HotelSCategories");

                    b.Navigation("HotelSExtras");

                    b.Navigation("HotelSRoomTypes");

                    b.Navigation("HotelSUnits");

                    b.Navigation("MaintAEquipements");

                    b.Navigation("MaintRRequests");

                    b.Navigation("MaintSTeams");

                    b.Navigation("PCaissiers");

                    b.Navigation("PPos");

                    b.Navigation("PaieCCotisations");

                    b.Navigation("PaieCRubriques");

                    b.Navigation("PaieCVariables");

                    b.Navigation("PaieCalculAvances");

                    b.Navigation("PaieCalculBulletins");

                    b.Navigation("PaieCalculConges");

                    b.Navigation("PaieCalculGrpEntetes");

                    b.Navigation("PaieEConges");

                    b.Navigation("PaieEContrats");

                    b.Navigation("PaieEEmployes");

                    b.Navigation("PaieEPrets");

                    b.Navigation("PaieICategories");

                    b.Navigation("PaieIDepartements");

                    b.Navigation("PaieIFonctions");

                    b.Navigation("PaieINiveaus");

                    b.Navigation("PaieIProfilContrats");

                    b.Navigation("PaieITauxFraisProfs");

                    b.Navigation("PaiePPointages");

                    b.Navigation("PaieZLogData");

                    b.Navigation("PaieZPlannings");

                    b.Navigation("PaieZUserDevices");

                    b.Navigation("PaieZZktdevices");

                    b.Navigation("RReglements");

                    b.Navigation("SEmailsSettings");

                    b.Navigation("SFilles");

                    b.Navigation("SbCreationBarCodes");

                    b.Navigation("ScCalendars");

                    b.Navigation("ScSchedules");

                    b.Navigation("TClients");

                    b.Navigation("TFournisseurs");

                    b.Navigation("TrTresorerieEntets");

                    b.Navigation("UUniteMesures");
                });

            modelBuilder.Entity("testdb.Models.ScCalendar", b =>
                {
                    b.Navigation("ScSchedules");
                });

            modelBuilder.Entity("testdb.Models.TClient", b =>
                {
                    b.Navigation("ABateaus");

                    b.Navigation("EEntets");

                    b.Navigation("FishEntets");

                    b.Navigation("HotelBBookingEntetes");

                    b.Navigation("PPos");

                    b.Navigation("PTickets");

                    b.Navigation("RReglements");
                });

            modelBuilder.Entity("testdb.Models.TFournisseur", b =>
                {
                    b.Navigation("EEntets");

                    b.Navigation("RReglements");
                });

            modelBuilder.Entity("testdb.Models.UUniteMesure", b =>
                {
                    b.Navigation("AArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
